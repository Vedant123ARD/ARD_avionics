
ARD_FC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005344  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080054e0  080054e0  000064e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005528  08005528  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  08005528  08005528  00006528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005530  08005530  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005530  08005530  00006530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005534  08005534  00006534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005538  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000070  080055a8  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  080055a8  000072ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b4c9  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019b9  00000000  00000000  00012569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  00013f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000784  00000000  00000000  000148c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015df9  00000000  00000000  00015044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd65  00000000  00000000  0002ae3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087edb  00000000  00000000  00037ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bfa7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e18  00000000  00000000  000bfac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000c28d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080054c4 	.word	0x080054c4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	080054c4 	.word	0x080054c4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_ldivmod>:
 8000b50:	b97b      	cbnz	r3, 8000b72 <__aeabi_ldivmod+0x22>
 8000b52:	b972      	cbnz	r2, 8000b72 <__aeabi_ldivmod+0x22>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bfbe      	ittt	lt
 8000b58:	2000      	movlt	r0, #0
 8000b5a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b5e:	e006      	blt.n	8000b6e <__aeabi_ldivmod+0x1e>
 8000b60:	bf08      	it	eq
 8000b62:	2800      	cmpeq	r0, #0
 8000b64:	bf1c      	itt	ne
 8000b66:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b6a:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6e:	f000 b9b5 	b.w	8000edc <__aeabi_idiv0>
 8000b72:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b76:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	db09      	blt.n	8000b92 <__aeabi_ldivmod+0x42>
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	db1a      	blt.n	8000bb8 <__aeabi_ldivmod+0x68>
 8000b82:	f000 f84d 	bl	8000c20 <__udivmoddi4>
 8000b86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b8e:	b004      	add	sp, #16
 8000b90:	4770      	bx	lr
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	db1b      	blt.n	8000bd4 <__aeabi_ldivmod+0x84>
 8000b9c:	f000 f840 	bl	8000c20 <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4240      	negs	r0, r0
 8000bac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb0:	4252      	negs	r2, r2
 8000bb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bb6:	4770      	bx	lr
 8000bb8:	4252      	negs	r2, r2
 8000bba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bbe:	f000 f82f 	bl	8000c20 <__udivmoddi4>
 8000bc2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bca:	b004      	add	sp, #16
 8000bcc:	4240      	negs	r0, r0
 8000bce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bd2:	4770      	bx	lr
 8000bd4:	4252      	negs	r2, r2
 8000bd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bda:	f000 f821 	bl	8000c20 <__udivmoddi4>
 8000bde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be6:	b004      	add	sp, #16
 8000be8:	4252      	negs	r2, r2
 8000bea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_uldivmod>:
 8000bf0:	b953      	cbnz	r3, 8000c08 <__aeabi_uldivmod+0x18>
 8000bf2:	b94a      	cbnz	r2, 8000c08 <__aeabi_uldivmod+0x18>
 8000bf4:	2900      	cmp	r1, #0
 8000bf6:	bf08      	it	eq
 8000bf8:	2800      	cmpeq	r0, #0
 8000bfa:	bf1c      	itt	ne
 8000bfc:	f04f 31ff 	movne.w	r1, #4294967295
 8000c00:	f04f 30ff 	movne.w	r0, #4294967295
 8000c04:	f000 b96a 	b.w	8000edc <__aeabi_idiv0>
 8000c08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c10:	f000 f806 	bl	8000c20 <__udivmoddi4>
 8000c14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c1c:	b004      	add	sp, #16
 8000c1e:	4770      	bx	lr

08000c20 <__udivmoddi4>:
 8000c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c24:	9d08      	ldr	r5, [sp, #32]
 8000c26:	460c      	mov	r4, r1
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d14e      	bne.n	8000cca <__udivmoddi4+0xaa>
 8000c2c:	4694      	mov	ip, r2
 8000c2e:	458c      	cmp	ip, r1
 8000c30:	4686      	mov	lr, r0
 8000c32:	fab2 f282 	clz	r2, r2
 8000c36:	d962      	bls.n	8000cfe <__udivmoddi4+0xde>
 8000c38:	b14a      	cbz	r2, 8000c4e <__udivmoddi4+0x2e>
 8000c3a:	f1c2 0320 	rsb	r3, r2, #32
 8000c3e:	4091      	lsls	r1, r2
 8000c40:	fa20 f303 	lsr.w	r3, r0, r3
 8000c44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c48:	4319      	orrs	r1, r3
 8000c4a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c52:	fa1f f68c 	uxth.w	r6, ip
 8000c56:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c5e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c66:	fb04 f106 	mul.w	r1, r4, r6
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	d90a      	bls.n	8000c84 <__udivmoddi4+0x64>
 8000c6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c72:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c76:	f080 8112 	bcs.w	8000e9e <__udivmoddi4+0x27e>
 8000c7a:	4299      	cmp	r1, r3
 8000c7c:	f240 810f 	bls.w	8000e9e <__udivmoddi4+0x27e>
 8000c80:	3c02      	subs	r4, #2
 8000c82:	4463      	add	r3, ip
 8000c84:	1a59      	subs	r1, r3, r1
 8000c86:	fa1f f38e 	uxth.w	r3, lr
 8000c8a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c8e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c96:	fb00 f606 	mul.w	r6, r0, r6
 8000c9a:	429e      	cmp	r6, r3
 8000c9c:	d90a      	bls.n	8000cb4 <__udivmoddi4+0x94>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ca6:	f080 80fc 	bcs.w	8000ea2 <__udivmoddi4+0x282>
 8000caa:	429e      	cmp	r6, r3
 8000cac:	f240 80f9 	bls.w	8000ea2 <__udivmoddi4+0x282>
 8000cb0:	4463      	add	r3, ip
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	1b9b      	subs	r3, r3, r6
 8000cb6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa6>
 8000cbe:	40d3      	lsrs	r3, r2
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xba>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb4>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa6>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x150>
 8000ce2:	42a3      	cmp	r3, r4
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xcc>
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	f0c0 80f0 	bcc.w	8000ecc <__udivmoddi4+0x2ac>
 8000cec:	1a86      	subs	r6, r0, r2
 8000cee:	eb64 0303 	sbc.w	r3, r4, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	2d00      	cmp	r5, #0
 8000cf6:	d0e6      	beq.n	8000cc6 <__udivmoddi4+0xa6>
 8000cf8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cfc:	e7e3      	b.n	8000cc6 <__udivmoddi4+0xa6>
 8000cfe:	2a00      	cmp	r2, #0
 8000d00:	f040 8090 	bne.w	8000e24 <__udivmoddi4+0x204>
 8000d04:	eba1 040c 	sub.w	r4, r1, ip
 8000d08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d0c:	fa1f f78c 	uxth.w	r7, ip
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d1a:	fb08 4416 	mls	r4, r8, r6, r4
 8000d1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d22:	fb07 f006 	mul.w	r0, r7, r6
 8000d26:	4298      	cmp	r0, r3
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x11c>
 8000d2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x11a>
 8000d34:	4298      	cmp	r0, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2b4>
 8000d3a:	4626      	mov	r6, r4
 8000d3c:	1a1c      	subs	r4, r3, r0
 8000d3e:	fa1f f38e 	uxth.w	r3, lr
 8000d42:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d46:	fb08 4410 	mls	r4, r8, r0, r4
 8000d4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d4e:	fb00 f707 	mul.w	r7, r0, r7
 8000d52:	429f      	cmp	r7, r3
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0x148>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x146>
 8000d60:	429f      	cmp	r7, r3
 8000d62:	f200 80b0 	bhi.w	8000ec6 <__udivmoddi4+0x2a6>
 8000d66:	4620      	mov	r0, r4
 8000d68:	1bdb      	subs	r3, r3, r7
 8000d6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x9c>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d80:	fa04 f301 	lsl.w	r3, r4, r1
 8000d84:	ea43 030c 	orr.w	r3, r3, ip
 8000d88:	40f4      	lsrs	r4, r6
 8000d8a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d8e:	0c38      	lsrs	r0, r7, #16
 8000d90:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d94:	fbb4 fef0 	udiv	lr, r4, r0
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fb00 441e 	mls	r4, r0, lr, r4
 8000da0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da4:	fb0e f90c 	mul.w	r9, lr, ip
 8000da8:	45a1      	cmp	r9, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x1a6>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000db6:	f080 8084 	bcs.w	8000ec2 <__udivmoddi4+0x2a2>
 8000dba:	45a1      	cmp	r9, r4
 8000dbc:	f240 8081 	bls.w	8000ec2 <__udivmoddi4+0x2a2>
 8000dc0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dc4:	443c      	add	r4, r7
 8000dc6:	eba4 0409 	sub.w	r4, r4, r9
 8000dca:	fa1f f983 	uxth.w	r9, r3
 8000dce:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dd2:	fb00 4413 	mls	r4, r0, r3, r4
 8000dd6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dda:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d907      	bls.n	8000df2 <__udivmoddi4+0x1d2>
 8000de2:	193c      	adds	r4, r7, r4
 8000de4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de8:	d267      	bcs.n	8000eba <__udivmoddi4+0x29a>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d965      	bls.n	8000eba <__udivmoddi4+0x29a>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000df6:	fba0 9302 	umull	r9, r3, r0, r2
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	429c      	cmp	r4, r3
 8000e00:	46ce      	mov	lr, r9
 8000e02:	469c      	mov	ip, r3
 8000e04:	d351      	bcc.n	8000eaa <__udivmoddi4+0x28a>
 8000e06:	d04e      	beq.n	8000ea6 <__udivmoddi4+0x286>
 8000e08:	b155      	cbz	r5, 8000e20 <__udivmoddi4+0x200>
 8000e0a:	ebb8 030e 	subs.w	r3, r8, lr
 8000e0e:	eb64 040c 	sbc.w	r4, r4, ip
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	40cb      	lsrs	r3, r1
 8000e18:	431e      	orrs	r6, r3
 8000e1a:	40cc      	lsrs	r4, r1
 8000e1c:	e9c5 6400 	strd	r6, r4, [r5]
 8000e20:	2100      	movs	r1, #0
 8000e22:	e750      	b.n	8000cc6 <__udivmoddi4+0xa6>
 8000e24:	f1c2 0320 	rsb	r3, r2, #32
 8000e28:	fa20 f103 	lsr.w	r1, r0, r3
 8000e2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e30:	fa24 f303 	lsr.w	r3, r4, r3
 8000e34:	4094      	lsls	r4, r2
 8000e36:	430c      	orrs	r4, r1
 8000e38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e3c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e48:	fb08 3110 	mls	r1, r8, r0, r3
 8000e4c:	0c23      	lsrs	r3, r4, #16
 8000e4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e52:	fb00 f107 	mul.w	r1, r0, r7
 8000e56:	4299      	cmp	r1, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x24c>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e62:	d22c      	bcs.n	8000ebe <__udivmoddi4+0x29e>
 8000e64:	4299      	cmp	r1, r3
 8000e66:	d92a      	bls.n	8000ebe <__udivmoddi4+0x29e>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4463      	add	r3, ip
 8000e6c:	1a5b      	subs	r3, r3, r1
 8000e6e:	b2a4      	uxth	r4, r4
 8000e70:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e74:	fb08 3311 	mls	r3, r8, r1, r3
 8000e78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e7c:	fb01 f307 	mul.w	r3, r1, r7
 8000e80:	42a3      	cmp	r3, r4
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x276>
 8000e84:	eb1c 0404 	adds.w	r4, ip, r4
 8000e88:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e8c:	d213      	bcs.n	8000eb6 <__udivmoddi4+0x296>
 8000e8e:	42a3      	cmp	r3, r4
 8000e90:	d911      	bls.n	8000eb6 <__udivmoddi4+0x296>
 8000e92:	3902      	subs	r1, #2
 8000e94:	4464      	add	r4, ip
 8000e96:	1ae4      	subs	r4, r4, r3
 8000e98:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e9c:	e739      	b.n	8000d12 <__udivmoddi4+0xf2>
 8000e9e:	4604      	mov	r4, r0
 8000ea0:	e6f0      	b.n	8000c84 <__udivmoddi4+0x64>
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	e706      	b.n	8000cb4 <__udivmoddi4+0x94>
 8000ea6:	45c8      	cmp	r8, r9
 8000ea8:	d2ae      	bcs.n	8000e08 <__udivmoddi4+0x1e8>
 8000eaa:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eae:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eb2:	3801      	subs	r0, #1
 8000eb4:	e7a8      	b.n	8000e08 <__udivmoddi4+0x1e8>
 8000eb6:	4631      	mov	r1, r6
 8000eb8:	e7ed      	b.n	8000e96 <__udivmoddi4+0x276>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	e799      	b.n	8000df2 <__udivmoddi4+0x1d2>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e7d4      	b.n	8000e6c <__udivmoddi4+0x24c>
 8000ec2:	46d6      	mov	lr, sl
 8000ec4:	e77f      	b.n	8000dc6 <__udivmoddi4+0x1a6>
 8000ec6:	4463      	add	r3, ip
 8000ec8:	3802      	subs	r0, #2
 8000eca:	e74d      	b.n	8000d68 <__udivmoddi4+0x148>
 8000ecc:	4606      	mov	r6, r0
 8000ece:	4623      	mov	r3, r4
 8000ed0:	4608      	mov	r0, r1
 8000ed2:	e70f      	b.n	8000cf4 <__udivmoddi4+0xd4>
 8000ed4:	3e02      	subs	r6, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	e730      	b.n	8000d3c <__udivmoddi4+0x11c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <init_bmp280>:
float pressure, temperature, humidity;
float max_pressure = 0.0f;
float min_pressure = 100000000.0f;
float altitude;

void init_bmp280(BMP280_HandleTypedef *bmp280, I2C_HandleTypeDef *hi2c) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
    bmp280_init_default_params(&bmp280->params);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	332c      	adds	r3, #44	@ 0x2c
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f89a 	bl	8001028 <bmp280_init_default_params>
    bmp280->addr = BMP280_I2C_ADDRESS_0;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2276      	movs	r2, #118	@ 0x76
 8000ef8:	849a      	strh	r2, [r3, #36]	@ 0x24
    bmp280->i2c = hi2c;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	683a      	ldr	r2, [r7, #0]
 8000efe:	629a      	str	r2, [r3, #40]	@ 0x28

    while (!bmp280_init(bmp280, &bmp280->params)) {
 8000f00:	e003      	b.n	8000f0a <init_bmp280+0x2a>
        HAL_Delay(2000);
 8000f02:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f06:	f001 f97d 	bl	8002204 <HAL_Delay>
    while (!bmp280_init(bmp280, &bmp280->params)) {
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	332c      	adds	r3, #44	@ 0x2c
 8000f0e:	4619      	mov	r1, r3
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f000 fa03 	bl	800131c <bmp280_init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	f083 0301 	eor.w	r3, r3, #1
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1ef      	bne.n	8000f02 <init_bmp280+0x22>
    }
}
 8000f22:	bf00      	nop
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	0000      	movs	r0, r0
	...

08000f30 <read_altitude>:

void read_altitude(BMP280_HandleTypedef *bmp280) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
    if (bmp280_read_float(bmp280, &temperature, &pressure, &humidity)) {
 8000f38:	4b33      	ldr	r3, [pc, #204]	@ (8001008 <read_altitude+0xd8>)
 8000f3a:	4a34      	ldr	r2, [pc, #208]	@ (800100c <read_altitude+0xdc>)
 8000f3c:	4934      	ldr	r1, [pc, #208]	@ (8001010 <read_altitude+0xe0>)
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 fe54 	bl	8001bec <bmp280_read_float>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d025      	beq.n	8000f96 <read_altitude+0x66>
        if (pressure > max_pressure) max_pressure = pressure;
 8000f4a:	4b30      	ldr	r3, [pc, #192]	@ (800100c <read_altitude+0xdc>)
 8000f4c:	ed93 7a00 	vldr	s14, [r3]
 8000f50:	4b30      	ldr	r3, [pc, #192]	@ (8001014 <read_altitude+0xe4>)
 8000f52:	edd3 7a00 	vldr	s15, [r3]
 8000f56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f5e:	dd03      	ble.n	8000f68 <read_altitude+0x38>
 8000f60:	4b2a      	ldr	r3, [pc, #168]	@ (800100c <read_altitude+0xdc>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a2b      	ldr	r2, [pc, #172]	@ (8001014 <read_altitude+0xe4>)
 8000f66:	6013      	str	r3, [r2, #0]
        if (pressure < min_pressure && pressure > 0) min_pressure = pressure;
 8000f68:	4b28      	ldr	r3, [pc, #160]	@ (800100c <read_altitude+0xdc>)
 8000f6a:	ed93 7a00 	vldr	s14, [r3]
 8000f6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001018 <read_altitude+0xe8>)
 8000f70:	edd3 7a00 	vldr	s15, [r3]
 8000f74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7c:	d50b      	bpl.n	8000f96 <read_altitude+0x66>
 8000f7e:	4b23      	ldr	r3, [pc, #140]	@ (800100c <read_altitude+0xdc>)
 8000f80:	edd3 7a00 	vldr	s15, [r3]
 8000f84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8c:	dd03      	ble.n	8000f96 <read_altitude+0x66>
 8000f8e:	4b1f      	ldr	r3, [pc, #124]	@ (800100c <read_altitude+0xdc>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a21      	ldr	r2, [pc, #132]	@ (8001018 <read_altitude+0xe8>)
 8000f94:	6013      	str	r3, [r2, #0]
    }
    altitude = 44330.0f * (1.0f - pow((pressure / 101325.0f), (1.0f / 5.255f)));
 8000f96:	4b1d      	ldr	r3, [pc, #116]	@ (800100c <read_altitude+0xdc>)
 8000f98:	edd3 7a00 	vldr	s15, [r3]
 8000f9c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800101c <read_altitude+0xec>
 8000fa0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fa4:	ee16 0a90 	vmov	r0, s13
 8000fa8:	f7ff fa7a 	bl	80004a0 <__aeabi_f2d>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 8000ff8 <read_altitude+0xc8>
 8000fb4:	ec43 2b10 	vmov	d0, r2, r3
 8000fb8:	f003 fb24 	bl	8004604 <pow>
 8000fbc:	ec53 2b10 	vmov	r2, r3, d0
 8000fc0:	f04f 0000 	mov.w	r0, #0
 8000fc4:	4916      	ldr	r1, [pc, #88]	@ (8001020 <read_altitude+0xf0>)
 8000fc6:	f7ff f90b 	bl	80001e0 <__aeabi_dsub>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	4610      	mov	r0, r2
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	a30b      	add	r3, pc, #44	@ (adr r3, 8001000 <read_altitude+0xd0>)
 8000fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd8:	f7ff faba 	bl	8000550 <__aeabi_dmul>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f7ff fd64 	bl	8000ab0 <__aeabi_d2f>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	4a0e      	ldr	r2, [pc, #56]	@ (8001024 <read_altitude+0xf4>)
 8000fec:	6013      	str	r3, [r2, #0]
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	c0000000 	.word	0xc0000000
 8000ffc:	3fc85b95 	.word	0x3fc85b95
 8001000:	00000000 	.word	0x00000000
 8001004:	40e5a540 	.word	0x40e5a540
 8001008:	20000094 	.word	0x20000094
 800100c:	2000008c 	.word	0x2000008c
 8001010:	20000090 	.word	0x20000090
 8001014:	20000098 	.word	0x20000098
 8001018:	20000000 	.word	0x20000000
 800101c:	47c5e680 	.word	0x47c5e680
 8001020:	3ff00000 	.word	0x3ff00000
 8001024:	2000009c 	.word	0x2000009c

08001028 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2203      	movs	r2, #3
 8001034:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2203      	movs	r2, #3
 8001040:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2203      	movs	r2, #3
 8001046:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2203      	movs	r2, #3
 800104c:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2203      	movs	r2, #3
 8001052:	715a      	strb	r2, [r3, #5]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	@ 0x28
 8001064:	af04      	add	r7, sp, #16
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	460b      	mov	r3, r1
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800107a:	7afb      	ldrb	r3, [r7, #11]
 800107c:	b29a      	uxth	r2, r3
 800107e:	8af9      	ldrh	r1, [r7, #22]
 8001080:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001084:	9302      	str	r3, [sp, #8]
 8001086:	2302      	movs	r3, #2
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	f001 fd83 	bl	8002b9c <HAL_I2C_Mem_Read>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d10b      	bne.n	80010b4 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800109c:	7d7b      	ldrb	r3, [r7, #21]
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	7d3b      	ldrb	r3, [r7, #20]
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	4313      	orrs	r3, r2
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	801a      	strh	r2, [r3, #0]
		return true;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e000      	b.n	80010b6 <read_register16+0x56>
	} else
		return false;
 80010b4:	2300      	movs	r3, #0

}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80010be:	b590      	push	{r4, r7, lr}
 80010c0:	b08b      	sub	sp, #44	@ 0x2c
 80010c2:	af04      	add	r7, sp, #16
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	461a      	mov	r2, r3
 80010ca:	460b      	mov	r3, r1
 80010cc:	72fb      	strb	r3, [r7, #11]
 80010ce:	4613      	mov	r3, r2
 80010d0:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	7abb      	ldrb	r3, [r7, #10]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	8af9      	ldrh	r1, [r7, #22]
 80010e8:	f241 3488 	movw	r4, #5000	@ 0x1388
 80010ec:	9402      	str	r4, [sp, #8]
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2301      	movs	r3, #1
 80010f6:	f001 fd51 	bl	8002b9c <HAL_I2C_Mem_Read>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <read_data+0x46>
		return 0;
 8001100:	2300      	movs	r3, #0
 8001102:	e000      	b.n	8001106 <read_data+0x48>
	else
		return 1;
 8001104:	2301      	movs	r3, #1

}
 8001106:	4618      	mov	r0, r3
 8001108:	371c      	adds	r7, #28
 800110a:	46bd      	mov	sp, r7
 800110c:	bd90      	pop	{r4, r7, pc}

0800110e <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	461a      	mov	r2, r3
 800111a:	2188      	movs	r1, #136	@ 0x88
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ff9f 	bl	8001060 <read_register16>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d06f      	beq.n	8001208 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3302      	adds	r3, #2
 800112c:	461a      	mov	r2, r3
 800112e:	218a      	movs	r1, #138	@ 0x8a
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ff95 	bl	8001060 <read_register16>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d065      	beq.n	8001208 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3304      	adds	r3, #4
 8001140:	461a      	mov	r2, r3
 8001142:	218c      	movs	r1, #140	@ 0x8c
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ff8b 	bl	8001060 <read_register16>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d05b      	beq.n	8001208 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3306      	adds	r3, #6
 8001154:	461a      	mov	r2, r3
 8001156:	218e      	movs	r1, #142	@ 0x8e
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff81 	bl	8001060 <read_register16>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d051      	beq.n	8001208 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3308      	adds	r3, #8
 8001168:	461a      	mov	r2, r3
 800116a:	2190      	movs	r1, #144	@ 0x90
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ff77 	bl	8001060 <read_register16>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d047      	beq.n	8001208 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	330a      	adds	r3, #10
 800117c:	461a      	mov	r2, r3
 800117e:	2192      	movs	r1, #146	@ 0x92
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ff6d 	bl	8001060 <read_register16>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d03d      	beq.n	8001208 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	330c      	adds	r3, #12
 8001190:	461a      	mov	r2, r3
 8001192:	2194      	movs	r1, #148	@ 0x94
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ff63 	bl	8001060 <read_register16>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d033      	beq.n	8001208 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	330e      	adds	r3, #14
 80011a4:	461a      	mov	r2, r3
 80011a6:	2196      	movs	r1, #150	@ 0x96
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ff59 	bl	8001060 <read_register16>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d029      	beq.n	8001208 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3310      	adds	r3, #16
 80011b8:	461a      	mov	r2, r3
 80011ba:	2198      	movs	r1, #152	@ 0x98
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ff4f 	bl	8001060 <read_register16>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d01f      	beq.n	8001208 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3312      	adds	r3, #18
 80011cc:	461a      	mov	r2, r3
 80011ce:	219a      	movs	r1, #154	@ 0x9a
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff45 	bl	8001060 <read_register16>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d015      	beq.n	8001208 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3314      	adds	r3, #20
 80011e0:	461a      	mov	r2, r3
 80011e2:	219c      	movs	r1, #156	@ 0x9c
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ff3b 	bl	8001060 <read_register16>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d00b      	beq.n	8001208 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80011f4:	461a      	mov	r2, r3
 80011f6:	219e      	movs	r1, #158	@ 0x9e
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ff31 	bl	8001060 <read_register16>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <read_calibration_data+0xfa>

		return true;
 8001204:	2301      	movs	r3, #1
 8001206:	e000      	b.n	800120a <read_calibration_data+0xfc>
	}

	return false;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001212:	b580      	push	{r7, lr}
 8001214:	b084      	sub	sp, #16
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f103 0218 	add.w	r2, r3, #24
 8001220:	2301      	movs	r3, #1
 8001222:	21a1      	movs	r1, #161	@ 0xa1
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff4a 	bl	80010be <read_data>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d14b      	bne.n	80012c8 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	331a      	adds	r3, #26
 8001234:	461a      	mov	r2, r3
 8001236:	21e1      	movs	r1, #225	@ 0xe1
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff11 	bl	8001060 <read_register16>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d041      	beq.n	80012c8 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f103 021c 	add.w	r2, r3, #28
 800124a:	2301      	movs	r3, #1
 800124c:	21e3      	movs	r1, #227	@ 0xe3
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ff35 	bl	80010be <read_data>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d136      	bne.n	80012c8 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800125a:	f107 030e 	add.w	r3, r7, #14
 800125e:	461a      	mov	r2, r3
 8001260:	21e4      	movs	r1, #228	@ 0xe4
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff fefc 	bl	8001060 <read_register16>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d02c      	beq.n	80012c8 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	461a      	mov	r2, r3
 8001274:	21e5      	movs	r1, #229	@ 0xe5
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff fef2 	bl	8001060 <read_register16>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d022      	beq.n	80012c8 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8001288:	2301      	movs	r3, #1
 800128a:	21e7      	movs	r1, #231	@ 0xe7
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff ff16 	bl	80010be <read_data>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d117      	bne.n	80012c8 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001298:	89fb      	ldrh	r3, [r7, #14]
 800129a:	011b      	lsls	r3, r3, #4
 800129c:	b21b      	sxth	r3, r3
 800129e:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	89fb      	ldrh	r3, [r7, #14]
 80012a6:	121b      	asrs	r3, r3, #8
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	b21b      	sxth	r3, r3
 80012b0:	4313      	orrs	r3, r2
 80012b2:	b21a      	sxth	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80012b8:	89bb      	ldrh	r3, [r7, #12]
 80012ba:	091b      	lsrs	r3, r3, #4
 80012bc:	b29b      	uxth	r3, r3
 80012be:	b21a      	sxth	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	841a      	strh	r2, [r3, #32]

		return true;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e000      	b.n	80012ca <read_hum_calibration_data+0xb8>
	}

	return false;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b088      	sub	sp, #32
 80012d6:	af04      	add	r7, sp, #16
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	460b      	mov	r3, r1
 80012dc:	70fb      	strb	r3, [r7, #3]
 80012de:	4613      	mov	r3, r2
 80012e0:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80012ee:	78fb      	ldrb	r3, [r7, #3]
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	89f9      	ldrh	r1, [r7, #14]
 80012f4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80012f8:	9302      	str	r3, [sp, #8]
 80012fa:	2301      	movs	r3, #1
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	1cbb      	adds	r3, r7, #2
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2301      	movs	r3, #1
 8001304:	f001 fb50 	bl	80029a8 <HAL_I2C_Mem_Write>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <write_register8+0x40>
		return false;
 800130e:	2300      	movs	r3, #0
 8001310:	e000      	b.n	8001314 <write_register8+0x42>
	else
		return true;
 8001312:	2301      	movs	r3, #1
}
 8001314:	4618      	mov	r0, r3
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800132a:	2b76      	cmp	r3, #118	@ 0x76
 800132c:	d005      	beq.n	800133a <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001332:	2b77      	cmp	r3, #119	@ 0x77
 8001334:	d001      	beq.n	800133a <bmp280_init+0x1e>

		return false;
 8001336:	2300      	movs	r3, #0
 8001338:	e099      	b.n	800146e <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001340:	2301      	movs	r3, #1
 8001342:	21d0      	movs	r1, #208	@ 0xd0
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff feba 	bl	80010be <read_data>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <bmp280_init+0x38>
		return false;
 8001350:	2300      	movs	r3, #0
 8001352:	e08c      	b.n	800146e <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800135a:	2b58      	cmp	r3, #88	@ 0x58
 800135c:	d006      	beq.n	800136c <bmp280_init+0x50>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001364:	2b60      	cmp	r3, #96	@ 0x60
 8001366:	d001      	beq.n	800136c <bmp280_init+0x50>

		return false;
 8001368:	2300      	movs	r3, #0
 800136a:	e080      	b.n	800146e <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800136c:	22b6      	movs	r2, #182	@ 0xb6
 800136e:	21e0      	movs	r1, #224	@ 0xe0
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ffae 	bl	80012d2 <write_register8>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <bmp280_init+0x64>
		return false;
 800137c:	2300      	movs	r3, #0
 800137e:	e076      	b.n	800146e <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001380:	f107 020c 	add.w	r2, r7, #12
 8001384:	2301      	movs	r3, #1
 8001386:	21f3      	movs	r1, #243	@ 0xf3
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff fe98 	bl	80010be <read_data>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1f5      	bne.n	8001380 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001394:	7b3b      	ldrb	r3, [r7, #12]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f0      	bne.n	8001380 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff feb5 	bl	800110e <read_calibration_data>
 80013a4:	4603      	mov	r3, r0
 80013a6:	f083 0301 	eor.w	r3, r3, #1
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d100      	bne.n	80013b2 <bmp280_init+0x96>
 80013b0:	e001      	b.n	80013b6 <bmp280_init+0x9a>
		return false;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e05b      	b.n	800146e <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80013bc:	2b60      	cmp	r3, #96	@ 0x60
 80013be:	d10a      	bne.n	80013d6 <bmp280_init+0xba>
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ff26 	bl	8001212 <read_hum_calibration_data>
 80013c6:	4603      	mov	r3, r0
 80013c8:	f083 0301 	eor.w	r3, r3, #1
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <bmp280_init+0xba>
		return false;
 80013d2:	2300      	movs	r3, #0
 80013d4:	e04b      	b.n	800146e <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	795b      	ldrb	r3, [r3, #5]
 80013da:	015b      	lsls	r3, r3, #5
 80013dc:	b25a      	sxtb	r2, r3
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	785b      	ldrb	r3, [r3, #1]
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	4313      	orrs	r3, r2
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	461a      	mov	r2, r3
 80013f0:	21f5      	movs	r1, #245	@ 0xf5
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff ff6d 	bl	80012d2 <write_register8>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <bmp280_init+0xe6>
		return false;
 80013fe:	2300      	movs	r3, #0
 8001400:	e035      	b.n	800146e <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d102      	bne.n	8001410 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	78db      	ldrb	r3, [r3, #3]
 8001414:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001416:	b25a      	sxtb	r2, r3
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	789b      	ldrb	r3, [r3, #2]
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	b25b      	sxtb	r3, r3
 8001420:	4313      	orrs	r3, r2
 8001422:	b25a      	sxtb	r2, r3
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	b25b      	sxtb	r3, r3
 800142a:	4313      	orrs	r3, r2
 800142c:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 800142e:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001436:	2b60      	cmp	r3, #96	@ 0x60
 8001438:	d10d      	bne.n	8001456 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	791b      	ldrb	r3, [r3, #4]
 800143e:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001440:	7b7b      	ldrb	r3, [r7, #13]
 8001442:	461a      	mov	r2, r3
 8001444:	21f2      	movs	r1, #242	@ 0xf2
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ff43 	bl	80012d2 <write_register8>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <bmp280_init+0x13a>
			return false;
 8001452:	2300      	movs	r3, #0
 8001454:	e00b      	b.n	800146e <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001456:	7bbb      	ldrb	r3, [r7, #14]
 8001458:	461a      	mov	r2, r3
 800145a:	21f4      	movs	r1, #244	@ 0xf4
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ff38 	bl	80012d2 <write_register8>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <bmp280_init+0x150>
		return false;
 8001468:	2300      	movs	r3, #0
 800146a:	e000      	b.n	800146e <bmp280_init+0x152>
	}

	return true;
 800146c:	2301      	movs	r3, #1
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001476:	b480      	push	{r7}
 8001478:	b087      	sub	sp, #28
 800147a:	af00      	add	r7, sp, #0
 800147c:	60f8      	str	r0, [r7, #12]
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	10da      	asrs	r2, r3, #3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001494:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001498:	12db      	asrs	r3, r3, #11
 800149a:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	111b      	asrs	r3, r3, #4
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	8812      	ldrh	r2, [r2, #0]
 80014a4:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	1112      	asrs	r2, r2, #4
 80014aa:	68f9      	ldr	r1, [r7, #12]
 80014ac:	8809      	ldrh	r1, [r1, #0]
 80014ae:	1a52      	subs	r2, r2, r1
 80014b0:	fb02 f303 	mul.w	r3, r2, r3
 80014b4:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80014c0:	139b      	asrs	r3, r3, #14
 80014c2:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	441a      	add	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4613      	mov	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	3380      	adds	r3, #128	@ 0x80
 80014da:	121b      	asrs	r3, r3, #8
}
 80014dc:	4618      	mov	r0, r3
 80014de:	371c      	adds	r7, #28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 80014e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014ec:	b0cc      	sub	sp, #304	@ 0x130
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 80014f4:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 80014f8:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80014fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001500:	17da      	asrs	r2, r3, #31
 8001502:	461c      	mov	r4, r3
 8001504:	4615      	mov	r5, r2
 8001506:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800150a:	f145 3bff 	adc.w	fp, r5, #4294967295
 800150e:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001512:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001516:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800151a:	fb03 f102 	mul.w	r1, r3, r2
 800151e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001522:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001526:	fb02 f303 	mul.w	r3, r2, r3
 800152a:	18ca      	adds	r2, r1, r3
 800152c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001530:	fba3 8903 	umull	r8, r9, r3, r3
 8001534:	eb02 0309 	add.w	r3, r2, r9
 8001538:	4699      	mov	r9, r3
 800153a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800153e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001542:	b21b      	sxth	r3, r3
 8001544:	17da      	asrs	r2, r3, #31
 8001546:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800154a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800154e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001552:	4603      	mov	r3, r0
 8001554:	fb03 f209 	mul.w	r2, r3, r9
 8001558:	460b      	mov	r3, r1
 800155a:	fb08 f303 	mul.w	r3, r8, r3
 800155e:	4413      	add	r3, r2
 8001560:	4602      	mov	r2, r0
 8001562:	fba8 1202 	umull	r1, r2, r8, r2
 8001566:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800156a:	460a      	mov	r2, r1
 800156c:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8001570:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001574:	4413      	add	r3, r2
 8001576:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800157a:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 800157e:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8001582:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800158a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800158e:	b21b      	sxth	r3, r3
 8001590:	17da      	asrs	r2, r3, #31
 8001592:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001596:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800159a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800159e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80015a2:	462a      	mov	r2, r5
 80015a4:	fb02 f203 	mul.w	r2, r2, r3
 80015a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80015ac:	4621      	mov	r1, r4
 80015ae:	fb01 f303 	mul.w	r3, r1, r3
 80015b2:	441a      	add	r2, r3
 80015b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80015b8:	4621      	mov	r1, r4
 80015ba:	fba3 1301 	umull	r1, r3, r3, r1
 80015be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80015c2:	460b      	mov	r3, r1
 80015c4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80015c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80015cc:	18d3      	adds	r3, r2, r3
 80015ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80015d2:	f04f 0000 	mov.w	r0, #0
 80015d6:	f04f 0100 	mov.w	r1, #0
 80015da:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80015de:	462b      	mov	r3, r5
 80015e0:	0459      	lsls	r1, r3, #17
 80015e2:	4623      	mov	r3, r4
 80015e4:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80015e8:	4623      	mov	r3, r4
 80015ea:	0458      	lsls	r0, r3, #17
 80015ec:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80015f0:	1814      	adds	r4, r2, r0
 80015f2:	643c      	str	r4, [r7, #64]	@ 0x40
 80015f4:	414b      	adcs	r3, r1
 80015f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80015f8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80015fc:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001604:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001608:	b21b      	sxth	r3, r3
 800160a:	17da      	asrs	r2, r3, #31
 800160c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001610:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001614:	f04f 0000 	mov.w	r0, #0
 8001618:	f04f 0100 	mov.w	r1, #0
 800161c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001620:	00d9      	lsls	r1, r3, #3
 8001622:	2000      	movs	r0, #0
 8001624:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001628:	1814      	adds	r4, r2, r0
 800162a:	63bc      	str	r4, [r7, #56]	@ 0x38
 800162c:	414b      	adcs	r3, r1
 800162e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001630:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001634:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001638:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800163c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001640:	fb03 f102 	mul.w	r1, r3, r2
 8001644:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001648:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800164c:	fb02 f303 	mul.w	r3, r2, r3
 8001650:	18ca      	adds	r2, r1, r3
 8001652:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001656:	fba3 1303 	umull	r1, r3, r3, r3
 800165a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800165e:	460b      	mov	r3, r1
 8001660:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001668:	18d3      	adds	r3, r2, r3
 800166a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800166e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001672:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001676:	b21b      	sxth	r3, r3
 8001678:	17da      	asrs	r2, r3, #31
 800167a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800167e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001682:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001686:	462b      	mov	r3, r5
 8001688:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800168c:	4642      	mov	r2, r8
 800168e:	fb02 f203 	mul.w	r2, r2, r3
 8001692:	464b      	mov	r3, r9
 8001694:	4621      	mov	r1, r4
 8001696:	fb01 f303 	mul.w	r3, r1, r3
 800169a:	4413      	add	r3, r2
 800169c:	4622      	mov	r2, r4
 800169e:	4641      	mov	r1, r8
 80016a0:	fba2 1201 	umull	r1, r2, r2, r1
 80016a4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80016a8:	460a      	mov	r2, r1
 80016aa:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80016ae:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80016b2:	4413      	add	r3, r2
 80016b4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80016b8:	f04f 0000 	mov.w	r0, #0
 80016bc:	f04f 0100 	mov.w	r1, #0
 80016c0:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80016c4:	4623      	mov	r3, r4
 80016c6:	0a18      	lsrs	r0, r3, #8
 80016c8:	462b      	mov	r3, r5
 80016ca:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80016ce:	462b      	mov	r3, r5
 80016d0:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80016d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80016d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80016da:	b21b      	sxth	r3, r3
 80016dc:	17da      	asrs	r2, r3, #31
 80016de:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80016e2:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80016e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016ea:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 80016ee:	464a      	mov	r2, r9
 80016f0:	fb02 f203 	mul.w	r2, r2, r3
 80016f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80016f8:	4644      	mov	r4, r8
 80016fa:	fb04 f303 	mul.w	r3, r4, r3
 80016fe:	441a      	add	r2, r3
 8001700:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001704:	4644      	mov	r4, r8
 8001706:	fba3 4304 	umull	r4, r3, r3, r4
 800170a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800170e:	4623      	mov	r3, r4
 8001710:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001714:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001718:	18d3      	adds	r3, r2, r3
 800171a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800172a:	464c      	mov	r4, r9
 800172c:	0323      	lsls	r3, r4, #12
 800172e:	4644      	mov	r4, r8
 8001730:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001734:	4644      	mov	r4, r8
 8001736:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001738:	1884      	adds	r4, r0, r2
 800173a:	633c      	str	r4, [r7, #48]	@ 0x30
 800173c:	eb41 0303 	adc.w	r3, r1, r3
 8001740:	637b      	str	r3, [r7, #52]	@ 0x34
 8001742:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001746:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 800174a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800174e:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001752:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001756:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800175a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800175e:	88db      	ldrh	r3, [r3, #6]
 8001760:	b29b      	uxth	r3, r3
 8001762:	2200      	movs	r2, #0
 8001764:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001768:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800176c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001770:	462b      	mov	r3, r5
 8001772:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001776:	4642      	mov	r2, r8
 8001778:	fb02 f203 	mul.w	r2, r2, r3
 800177c:	464b      	mov	r3, r9
 800177e:	4621      	mov	r1, r4
 8001780:	fb01 f303 	mul.w	r3, r1, r3
 8001784:	4413      	add	r3, r2
 8001786:	4622      	mov	r2, r4
 8001788:	4641      	mov	r1, r8
 800178a:	fba2 1201 	umull	r1, r2, r2, r1
 800178e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001792:	460a      	mov	r2, r1
 8001794:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001798:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800179c:	4413      	add	r3, r2
 800179e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80017ae:	4629      	mov	r1, r5
 80017b0:	104a      	asrs	r2, r1, #1
 80017b2:	4629      	mov	r1, r5
 80017b4:	17cb      	asrs	r3, r1, #31
 80017b6:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 80017ba:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80017be:	4313      	orrs	r3, r2
 80017c0:	d101      	bne.n	80017c6 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 80017c2:	2300      	movs	r3, #0
 80017c4:	e148      	b.n	8001a58 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 80017c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80017ca:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80017ce:	17da      	asrs	r2, r3, #31
 80017d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017d4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80017d8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 80017dc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80017e0:	105b      	asrs	r3, r3, #1
 80017e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80017e6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80017ea:	07db      	lsls	r3, r3, #31
 80017ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80017f0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80017f4:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80017f8:	4621      	mov	r1, r4
 80017fa:	1a89      	subs	r1, r1, r2
 80017fc:	67b9      	str	r1, [r7, #120]	@ 0x78
 80017fe:	4629      	mov	r1, r5
 8001800:	eb61 0303 	sbc.w	r3, r1, r3
 8001804:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001806:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800180a:	4622      	mov	r2, r4
 800180c:	462b      	mov	r3, r5
 800180e:	1891      	adds	r1, r2, r2
 8001810:	6239      	str	r1, [r7, #32]
 8001812:	415b      	adcs	r3, r3
 8001814:	627b      	str	r3, [r7, #36]	@ 0x24
 8001816:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800181a:	4621      	mov	r1, r4
 800181c:	1851      	adds	r1, r2, r1
 800181e:	61b9      	str	r1, [r7, #24]
 8001820:	4629      	mov	r1, r5
 8001822:	414b      	adcs	r3, r1
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001832:	4649      	mov	r1, r9
 8001834:	018b      	lsls	r3, r1, #6
 8001836:	4641      	mov	r1, r8
 8001838:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800183c:	4641      	mov	r1, r8
 800183e:	018a      	lsls	r2, r1, #6
 8001840:	4641      	mov	r1, r8
 8001842:	1889      	adds	r1, r1, r2
 8001844:	6139      	str	r1, [r7, #16]
 8001846:	4649      	mov	r1, r9
 8001848:	eb43 0101 	adc.w	r1, r3, r1
 800184c:	6179      	str	r1, [r7, #20]
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	f04f 0300 	mov.w	r3, #0
 8001856:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800185a:	4649      	mov	r1, r9
 800185c:	008b      	lsls	r3, r1, #2
 800185e:	4641      	mov	r1, r8
 8001860:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001864:	4641      	mov	r1, r8
 8001866:	008a      	lsls	r2, r1, #2
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	4603      	mov	r3, r0
 800186e:	4622      	mov	r2, r4
 8001870:	189b      	adds	r3, r3, r2
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	460b      	mov	r3, r1
 8001876:	462a      	mov	r2, r5
 8001878:	eb42 0303 	adc.w	r3, r2, r3
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	f04f 0300 	mov.w	r3, #0
 8001886:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800188a:	4649      	mov	r1, r9
 800188c:	008b      	lsls	r3, r1, #2
 800188e:	4641      	mov	r1, r8
 8001890:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001894:	4641      	mov	r1, r8
 8001896:	008a      	lsls	r2, r1, #2
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	4603      	mov	r3, r0
 800189e:	4622      	mov	r2, r4
 80018a0:	189b      	adds	r3, r3, r2
 80018a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80018a4:	462b      	mov	r3, r5
 80018a6:	460a      	mov	r2, r1
 80018a8:	eb42 0303 	adc.w	r3, r2, r3
 80018ac:	677b      	str	r3, [r7, #116]	@ 0x74
 80018ae:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80018b2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80018b6:	f7ff f94b 	bl	8000b50 <__aeabi_ldivmod>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80018c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018c6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80018ca:	b21b      	sxth	r3, r3
 80018cc:	17da      	asrs	r2, r3, #31
 80018ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80018d0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80018d2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80018d6:	f04f 0000 	mov.w	r0, #0
 80018da:	f04f 0100 	mov.w	r1, #0
 80018de:	0b50      	lsrs	r0, r2, #13
 80018e0:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80018e4:	1359      	asrs	r1, r3, #13
 80018e6:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80018ea:	462b      	mov	r3, r5
 80018ec:	fb00 f203 	mul.w	r2, r0, r3
 80018f0:	4623      	mov	r3, r4
 80018f2:	fb03 f301 	mul.w	r3, r3, r1
 80018f6:	4413      	add	r3, r2
 80018f8:	4622      	mov	r2, r4
 80018fa:	fba2 1200 	umull	r1, r2, r2, r0
 80018fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001902:	460a      	mov	r2, r1
 8001904:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001908:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800190c:	4413      	add	r3, r2
 800190e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001912:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001916:	f04f 0000 	mov.w	r0, #0
 800191a:	f04f 0100 	mov.w	r1, #0
 800191e:	0b50      	lsrs	r0, r2, #13
 8001920:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001924:	1359      	asrs	r1, r3, #13
 8001926:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800192a:	462b      	mov	r3, r5
 800192c:	fb00 f203 	mul.w	r2, r0, r3
 8001930:	4623      	mov	r3, r4
 8001932:	fb03 f301 	mul.w	r3, r3, r1
 8001936:	4413      	add	r3, r2
 8001938:	4622      	mov	r2, r4
 800193a:	fba2 1200 	umull	r1, r2, r2, r0
 800193e:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001942:	460a      	mov	r2, r1
 8001944:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001948:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800194c:	4413      	add	r3, r2
 800194e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 800195e:	4621      	mov	r1, r4
 8001960:	0e4a      	lsrs	r2, r1, #25
 8001962:	4629      	mov	r1, r5
 8001964:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001968:	4629      	mov	r1, r5
 800196a:	164b      	asrs	r3, r1, #25
 800196c:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001974:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001978:	b21b      	sxth	r3, r3
 800197a:	17da      	asrs	r2, r3, #31
 800197c:	663b      	str	r3, [r7, #96]	@ 0x60
 800197e:	667a      	str	r2, [r7, #100]	@ 0x64
 8001980:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001984:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001988:	462a      	mov	r2, r5
 800198a:	fb02 f203 	mul.w	r2, r2, r3
 800198e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001992:	4621      	mov	r1, r4
 8001994:	fb01 f303 	mul.w	r3, r1, r3
 8001998:	4413      	add	r3, r2
 800199a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800199e:	4621      	mov	r1, r4
 80019a0:	fba2 1201 	umull	r1, r2, r2, r1
 80019a4:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80019a8:	460a      	mov	r2, r1
 80019aa:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80019ae:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80019b2:	4413      	add	r3, r2
 80019b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	f04f 0300 	mov.w	r3, #0
 80019c0:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80019c4:	4621      	mov	r1, r4
 80019c6:	0cca      	lsrs	r2, r1, #19
 80019c8:	4629      	mov	r1, r5
 80019ca:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80019ce:	4629      	mov	r1, r5
 80019d0:	14cb      	asrs	r3, r1, #19
 80019d2:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 80019d6:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 80019da:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80019de:	1884      	adds	r4, r0, r2
 80019e0:	65bc      	str	r4, [r7, #88]	@ 0x58
 80019e2:	eb41 0303 	adc.w	r3, r1, r3
 80019e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80019e8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80019ec:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80019f0:	4621      	mov	r1, r4
 80019f2:	1889      	adds	r1, r1, r2
 80019f4:	6539      	str	r1, [r7, #80]	@ 0x50
 80019f6:	4629      	mov	r1, r5
 80019f8:	eb43 0101 	adc.w	r1, r3, r1
 80019fc:	6579      	str	r1, [r7, #84]	@ 0x54
 80019fe:	f04f 0000 	mov.w	r0, #0
 8001a02:	f04f 0100 	mov.w	r1, #0
 8001a06:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001a0a:	4623      	mov	r3, r4
 8001a0c:	0a18      	lsrs	r0, r3, #8
 8001a0e:	462b      	mov	r3, r5
 8001a10:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a14:	462b      	mov	r3, r5
 8001a16:	1219      	asrs	r1, r3, #8
 8001a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001a1c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001a20:	b21b      	sxth	r3, r3
 8001a22:	17da      	asrs	r2, r3, #31
 8001a24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a26:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	f04f 0300 	mov.w	r3, #0
 8001a30:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001a34:	464c      	mov	r4, r9
 8001a36:	0123      	lsls	r3, r4, #4
 8001a38:	4644      	mov	r4, r8
 8001a3a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001a3e:	4644      	mov	r4, r8
 8001a40:	0122      	lsls	r2, r4, #4
 8001a42:	1884      	adds	r4, r0, r2
 8001a44:	603c      	str	r4, [r7, #0]
 8001a46:	eb41 0303 	adc.w	r3, r1, r3
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a50:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 8001a54:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001a64 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001a64:	b480      	push	{r7}
 8001a66:	b087      	sub	sp, #28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001a76:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	039a      	lsls	r2, r3, #14
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001a82:	051b      	lsls	r3, r3, #20
 8001a84:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	fb01 f303 	mul.w	r3, r1, r3
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001a9a:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	fb01 f202 	mul.w	r2, r1, r2
 8001aaa:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001aac:	68f9      	ldr	r1, [r7, #12]
 8001aae:	7f09      	ldrb	r1, [r1, #28]
 8001ab0:	4608      	mov	r0, r1
 8001ab2:	6979      	ldr	r1, [r7, #20]
 8001ab4:	fb00 f101 	mul.w	r1, r0, r1
 8001ab8:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001aba:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001abe:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001ac2:	1292      	asrs	r2, r2, #10
 8001ac4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001ac8:	68f9      	ldr	r1, [r7, #12]
 8001aca:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001ace:	fb01 f202 	mul.w	r2, r1, r2
 8001ad2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001ad6:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001ad8:	fb02 f303 	mul.w	r3, r2, r3
 8001adc:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	13db      	asrs	r3, r3, #15
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	13d2      	asrs	r2, r2, #15
 8001ae6:	fb02 f303 	mul.w	r3, r2, r3
 8001aea:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	7e12      	ldrb	r2, [r2, #24]
 8001af0:	fb02 f303 	mul.w	r3, r2, r3
 8001af4:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001b02:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001b0a:	bfa8      	it	ge
 8001b0c:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001b10:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	131b      	asrs	r3, r3, #12
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	371c      	adds	r7, #28
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b08c      	sub	sp, #48	@ 0x30
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	60f8      	str	r0, [r7, #12]
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001b36:	2b60      	cmp	r3, #96	@ 0x60
 8001b38:	d007      	beq.n	8001b4a <bmp280_read_fixed+0x28>
		if (humidity)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d002      	beq.n	8001b46 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <bmp280_read_fixed+0x32>
 8001b50:	2308      	movs	r3, #8
 8001b52:	e000      	b.n	8001b56 <bmp280_read_fixed+0x34>
 8001b54:	2306      	movs	r3, #6
 8001b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	f107 0218 	add.w	r2, r7, #24
 8001b60:	21f7      	movs	r1, #247	@ 0xf7
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f7ff faab 	bl	80010be <read_data>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <bmp280_read_fixed+0x50>
		return false;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e038      	b.n	8001be4 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001b72:	7e3b      	ldrb	r3, [r7, #24]
 8001b74:	031a      	lsls	r2, r3, #12
 8001b76:	7e7b      	ldrb	r3, [r7, #25]
 8001b78:	011b      	lsls	r3, r3, #4
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	7eba      	ldrb	r2, [r7, #26]
 8001b7e:	0912      	lsrs	r2, r2, #4
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	4313      	orrs	r3, r2
 8001b84:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001b86:	7efb      	ldrb	r3, [r7, #27]
 8001b88:	031a      	lsls	r2, r3, #12
 8001b8a:	7f3b      	ldrb	r3, [r7, #28]
 8001b8c:	011b      	lsls	r3, r3, #4
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	7f7a      	ldrb	r2, [r7, #29]
 8001b92:	0912      	lsrs	r2, r2, #4
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	4313      	orrs	r3, r2
 8001b98:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f7ff fc67 	bl	8001476 <compensate_temperature>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f7ff fc97 	bl	80014e8 <compensate_pressure>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00d      	beq.n	8001be2 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001bc6:	7fbb      	ldrb	r3, [r7, #30]
 8001bc8:	021b      	lsls	r3, r3, #8
 8001bca:	7ffa      	ldrb	r2, [r7, #31]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	6a39      	ldr	r1, [r7, #32]
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f7ff ff44 	bl	8001a64 <compensate_humidity>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001be2:	2301      	movs	r3, #1
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3730      	adds	r7, #48	@ 0x30
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
 8001bf8:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <bmp280_read_float+0x1a>
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	e000      	b.n	8001c08 <bmp280_read_float+0x1c>
 8001c06:	2300      	movs	r3, #0
 8001c08:	f107 0218 	add.w	r2, r7, #24
 8001c0c:	f107 011c 	add.w	r1, r7, #28
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f7ff ff86 	bl	8001b22 <bmp280_read_fixed>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d028      	beq.n	8001c6e <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	ee07 3a90 	vmov	s15, r3
 8001c22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c26:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001c78 <bmp280_read_float+0x8c>
 8001c2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	ee07 3a90 	vmov	s15, r3
 8001c3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c3e:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001c7c <bmp280_read_float+0x90>
 8001c42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00b      	beq.n	8001c6a <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	ee07 3a90 	vmov	s15, r3
 8001c58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c5c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001c80 <bmp280_read_float+0x94>
 8001c60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <bmp280_read_float+0x84>
	}

	return false;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3720      	adds	r7, #32
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	42c80000 	.word	0x42c80000
 8001c7c:	43800000 	.word	0x43800000
 8001c80:	44800000 	.word	0x44800000

08001c84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c88:	f000 fa4a 	bl	8002120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c8c:	f000 f818 	bl	8001cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c90:	f000 f8d8 	bl	8001e44 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c94:	f000 f87e 	bl	8001d94 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001c98:	f000 f8aa 	bl	8001df0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  void SystemClock_Config(void);
  //static void MX_I2C1_Init(void);
 // static void MX_USART1_UART_Init(void);
  init_bmp280(&bmp280, &hi2c1);
 8001c9c:	4906      	ldr	r1, [pc, #24]	@ (8001cb8 <main+0x34>)
 8001c9e:	4807      	ldr	r0, [pc, #28]	@ (8001cbc <main+0x38>)
 8001ca0:	f7ff f91e 	bl	8000ee0 <init_bmp280>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      read_altitude(&bmp280);
 8001ca4:	4805      	ldr	r0, [pc, #20]	@ (8001cbc <main+0x38>)
 8001ca6:	f7ff f943 	bl	8000f30 <read_altitude>
      HAL_Delay(1000);
 8001caa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cae:	f000 faa9 	bl	8002204 <HAL_Delay>
      read_altitude(&bmp280);
 8001cb2:	bf00      	nop
 8001cb4:	e7f6      	b.n	8001ca4 <main+0x20>
 8001cb6:	bf00      	nop
 8001cb8:	200000a0 	.word	0x200000a0
 8001cbc:	2000013c 	.word	0x2000013c

08001cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b094      	sub	sp, #80	@ 0x50
 8001cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cc6:	f107 0320 	add.w	r3, r7, #32
 8001cca:	2230      	movs	r2, #48	@ 0x30
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f002 fc66 	bl	80045a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cd4:	f107 030c 	add.w	r3, r7, #12
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	4b28      	ldr	r3, [pc, #160]	@ (8001d8c <SystemClock_Config+0xcc>)
 8001cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cec:	4a27      	ldr	r2, [pc, #156]	@ (8001d8c <SystemClock_Config+0xcc>)
 8001cee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cf2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cf4:	4b25      	ldr	r3, [pc, #148]	@ (8001d8c <SystemClock_Config+0xcc>)
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d00:	2300      	movs	r3, #0
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	4b22      	ldr	r3, [pc, #136]	@ (8001d90 <SystemClock_Config+0xd0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001d0c:	4a20      	ldr	r2, [pc, #128]	@ (8001d90 <SystemClock_Config+0xd0>)
 8001d0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b1e      	ldr	r3, [pc, #120]	@ (8001d90 <SystemClock_Config+0xd0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d20:	2301      	movs	r3, #1
 8001d22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d28:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d2e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001d34:	2319      	movs	r3, #25
 8001d36:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d38:	23a8      	movs	r3, #168	@ 0xa8
 8001d3a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d40:	2304      	movs	r3, #4
 8001d42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d44:	f107 0320 	add.w	r3, r7, #32
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f001 fd0d 	bl	8003768 <HAL_RCC_OscConfig>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d54:	f000 f8ba 	bl	8001ecc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d58:	230f      	movs	r3, #15
 8001d5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d6e:	f107 030c 	add.w	r3, r7, #12
 8001d72:	2102      	movs	r1, #2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f001 ff6f 	bl	8003c58 <HAL_RCC_ClockConfig>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d80:	f000 f8a4 	bl	8001ecc <Error_Handler>
  }
}
 8001d84:	bf00      	nop
 8001d86:	3750      	adds	r7, #80	@ 0x50
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40007000 	.word	0x40007000

08001d94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d98:	4b12      	ldr	r3, [pc, #72]	@ (8001de4 <MX_I2C1_Init+0x50>)
 8001d9a:	4a13      	ldr	r2, [pc, #76]	@ (8001de8 <MX_I2C1_Init+0x54>)
 8001d9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d9e:	4b11      	ldr	r3, [pc, #68]	@ (8001de4 <MX_I2C1_Init+0x50>)
 8001da0:	4a12      	ldr	r2, [pc, #72]	@ (8001dec <MX_I2C1_Init+0x58>)
 8001da2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001da4:	4b0f      	ldr	r3, [pc, #60]	@ (8001de4 <MX_I2C1_Init+0x50>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001daa:	4b0e      	ldr	r3, [pc, #56]	@ (8001de4 <MX_I2C1_Init+0x50>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001db0:	4b0c      	ldr	r3, [pc, #48]	@ (8001de4 <MX_I2C1_Init+0x50>)
 8001db2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001db6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001db8:	4b0a      	ldr	r3, [pc, #40]	@ (8001de4 <MX_I2C1_Init+0x50>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dbe:	4b09      	ldr	r3, [pc, #36]	@ (8001de4 <MX_I2C1_Init+0x50>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dc4:	4b07      	ldr	r3, [pc, #28]	@ (8001de4 <MX_I2C1_Init+0x50>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dca:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <MX_I2C1_Init+0x50>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dd0:	4804      	ldr	r0, [pc, #16]	@ (8001de4 <MX_I2C1_Init+0x50>)
 8001dd2:	f000 fca5 	bl	8002720 <HAL_I2C_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ddc:	f000 f876 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	200000a0 	.word	0x200000a0
 8001de8:	40005400 	.word	0x40005400
 8001dec:	000186a0 	.word	0x000186a0

08001df0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001df4:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001df6:	4a12      	ldr	r2, [pc, #72]	@ (8001e40 <MX_USART1_UART_Init+0x50>)
 8001df8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dfa:	4b10      	ldr	r3, [pc, #64]	@ (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001dfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e02:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e08:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e14:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e16:	220c      	movs	r2, #12
 8001e18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1a:	4b08      	ldr	r3, [pc, #32]	@ (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e20:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e26:	4805      	ldr	r0, [pc, #20]	@ (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e28:	f002 f8f6 	bl	8004018 <HAL_UART_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e32:	f000 f84b 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200000f4 	.word	0x200000f4
 8001e40:	40011000 	.word	0x40011000

08001e44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec8 <MX_GPIO_Init+0x84>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	4a1d      	ldr	r2, [pc, #116]	@ (8001ec8 <MX_GPIO_Init+0x84>)
 8001e54:	f043 0304 	orr.w	r3, r3, #4
 8001e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec8 <MX_GPIO_Init+0x84>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	4b17      	ldr	r3, [pc, #92]	@ (8001ec8 <MX_GPIO_Init+0x84>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	4a16      	ldr	r2, [pc, #88]	@ (8001ec8 <MX_GPIO_Init+0x84>)
 8001e70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e76:	4b14      	ldr	r3, [pc, #80]	@ (8001ec8 <MX_GPIO_Init+0x84>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	607b      	str	r3, [r7, #4]
 8001e86:	4b10      	ldr	r3, [pc, #64]	@ (8001ec8 <MX_GPIO_Init+0x84>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	4a0f      	ldr	r2, [pc, #60]	@ (8001ec8 <MX_GPIO_Init+0x84>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e92:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec8 <MX_GPIO_Init+0x84>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	607b      	str	r3, [r7, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	603b      	str	r3, [r7, #0]
 8001ea2:	4b09      	ldr	r3, [pc, #36]	@ (8001ec8 <MX_GPIO_Init+0x84>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	4a08      	ldr	r2, [pc, #32]	@ (8001ec8 <MX_GPIO_Init+0x84>)
 8001ea8:	f043 0302 	orr.w	r3, r3, #2
 8001eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eae:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <MX_GPIO_Init+0x84>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	603b      	str	r3, [r7, #0]
 8001eb8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001eba:	bf00      	nop
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800

08001ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed0:	b672      	cpsid	i
}
 8001ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed4:	bf00      	nop
 8001ed6:	e7fd      	b.n	8001ed4 <Error_Handler+0x8>

08001ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	607b      	str	r3, [r7, #4]
 8001ee2:	4b10      	ldr	r3, [pc, #64]	@ (8001f24 <HAL_MspInit+0x4c>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee6:	4a0f      	ldr	r2, [pc, #60]	@ (8001f24 <HAL_MspInit+0x4c>)
 8001ee8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eee:	4b0d      	ldr	r3, [pc, #52]	@ (8001f24 <HAL_MspInit+0x4c>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ef6:	607b      	str	r3, [r7, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	603b      	str	r3, [r7, #0]
 8001efe:	4b09      	ldr	r3, [pc, #36]	@ (8001f24 <HAL_MspInit+0x4c>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	4a08      	ldr	r2, [pc, #32]	@ (8001f24 <HAL_MspInit+0x4c>)
 8001f04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f0a:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <HAL_MspInit+0x4c>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f12:	603b      	str	r3, [r7, #0]
 8001f14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800

08001f28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	@ 0x28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a19      	ldr	r2, [pc, #100]	@ (8001fac <HAL_I2C_MspInit+0x84>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d12b      	bne.n	8001fa2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	4b18      	ldr	r3, [pc, #96]	@ (8001fb0 <HAL_I2C_MspInit+0x88>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	4a17      	ldr	r2, [pc, #92]	@ (8001fb0 <HAL_I2C_MspInit+0x88>)
 8001f54:	f043 0302 	orr.w	r3, r3, #2
 8001f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5a:	4b15      	ldr	r3, [pc, #84]	@ (8001fb0 <HAL_I2C_MspInit+0x88>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f66:	23c0      	movs	r3, #192	@ 0xc0
 8001f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f6a:	2312      	movs	r3, #18
 8001f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f72:	2303      	movs	r3, #3
 8001f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f76:	2304      	movs	r3, #4
 8001f78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7a:	f107 0314 	add.w	r3, r7, #20
 8001f7e:	4619      	mov	r1, r3
 8001f80:	480c      	ldr	r0, [pc, #48]	@ (8001fb4 <HAL_I2C_MspInit+0x8c>)
 8001f82:	f000 fa49 	bl	8002418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	4b09      	ldr	r3, [pc, #36]	@ (8001fb0 <HAL_I2C_MspInit+0x88>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	4a08      	ldr	r2, [pc, #32]	@ (8001fb0 <HAL_I2C_MspInit+0x88>)
 8001f90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f96:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <HAL_I2C_MspInit+0x88>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fa2:	bf00      	nop
 8001fa4:	3728      	adds	r7, #40	@ 0x28
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40005400 	.word	0x40005400
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40020400 	.word	0x40020400

08001fb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	@ 0x28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a19      	ldr	r2, [pc, #100]	@ (800203c <HAL_UART_MspInit+0x84>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d12c      	bne.n	8002034 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	4b18      	ldr	r3, [pc, #96]	@ (8002040 <HAL_UART_MspInit+0x88>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe2:	4a17      	ldr	r2, [pc, #92]	@ (8002040 <HAL_UART_MspInit+0x88>)
 8001fe4:	f043 0310 	orr.w	r3, r3, #16
 8001fe8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fea:	4b15      	ldr	r3, [pc, #84]	@ (8002040 <HAL_UART_MspInit+0x88>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fee:	f003 0310 	and.w	r3, r3, #16
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	4b11      	ldr	r3, [pc, #68]	@ (8002040 <HAL_UART_MspInit+0x88>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffe:	4a10      	ldr	r2, [pc, #64]	@ (8002040 <HAL_UART_MspInit+0x88>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6313      	str	r3, [r2, #48]	@ 0x30
 8002006:	4b0e      	ldr	r3, [pc, #56]	@ (8002040 <HAL_UART_MspInit+0x88>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002012:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002018:	2302      	movs	r3, #2
 800201a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002020:	2303      	movs	r3, #3
 8002022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002024:	2307      	movs	r3, #7
 8002026:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	4619      	mov	r1, r3
 800202e:	4805      	ldr	r0, [pc, #20]	@ (8002044 <HAL_UART_MspInit+0x8c>)
 8002030:	f000 f9f2 	bl	8002418 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002034:	bf00      	nop
 8002036:	3728      	adds	r7, #40	@ 0x28
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40011000 	.word	0x40011000
 8002040:	40023800 	.word	0x40023800
 8002044:	40020000 	.word	0x40020000

08002048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800204c:	bf00      	nop
 800204e:	e7fd      	b.n	800204c <NMI_Handler+0x4>

08002050 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002054:	bf00      	nop
 8002056:	e7fd      	b.n	8002054 <HardFault_Handler+0x4>

08002058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800205c:	bf00      	nop
 800205e:	e7fd      	b.n	800205c <MemManage_Handler+0x4>

08002060 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002064:	bf00      	nop
 8002066:	e7fd      	b.n	8002064 <BusFault_Handler+0x4>

08002068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800206c:	bf00      	nop
 800206e:	e7fd      	b.n	800206c <UsageFault_Handler+0x4>

08002070 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800209e:	f000 f891 	bl	80021c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020ac:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <SystemInit+0x20>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b2:	4a05      	ldr	r2, [pc, #20]	@ (80020c8 <SystemInit+0x20>)
 80020b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002104 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020d0:	f7ff ffea 	bl	80020a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020d4:	480c      	ldr	r0, [pc, #48]	@ (8002108 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020d6:	490d      	ldr	r1, [pc, #52]	@ (800210c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002110 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020dc:	e002      	b.n	80020e4 <LoopCopyDataInit>

080020de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020e2:	3304      	adds	r3, #4

080020e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e8:	d3f9      	bcc.n	80020de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002114 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002118 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f0:	e001      	b.n	80020f6 <LoopFillZerobss>

080020f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f4:	3204      	adds	r2, #4

080020f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f8:	d3fb      	bcc.n	80020f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020fa:	f002 fa5f 	bl	80045bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020fe:	f7ff fdc1 	bl	8001c84 <main>
  bx  lr    
 8002102:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002104:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800210c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002110:	08005538 	.word	0x08005538
  ldr r2, =_sbss
 8002114:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002118:	200002ac 	.word	0x200002ac

0800211c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800211c:	e7fe      	b.n	800211c <ADC_IRQHandler>
	...

08002120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002124:	4b0e      	ldr	r3, [pc, #56]	@ (8002160 <HAL_Init+0x40>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a0d      	ldr	r2, [pc, #52]	@ (8002160 <HAL_Init+0x40>)
 800212a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800212e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002130:	4b0b      	ldr	r3, [pc, #44]	@ (8002160 <HAL_Init+0x40>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a0a      	ldr	r2, [pc, #40]	@ (8002160 <HAL_Init+0x40>)
 8002136:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800213a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800213c:	4b08      	ldr	r3, [pc, #32]	@ (8002160 <HAL_Init+0x40>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a07      	ldr	r2, [pc, #28]	@ (8002160 <HAL_Init+0x40>)
 8002142:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002146:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002148:	2003      	movs	r0, #3
 800214a:	f000 f931 	bl	80023b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800214e:	200f      	movs	r0, #15
 8002150:	f000 f808 	bl	8002164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002154:	f7ff fec0 	bl	8001ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40023c00 	.word	0x40023c00

08002164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800216c:	4b12      	ldr	r3, [pc, #72]	@ (80021b8 <HAL_InitTick+0x54>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4b12      	ldr	r3, [pc, #72]	@ (80021bc <HAL_InitTick+0x58>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	4619      	mov	r1, r3
 8002176:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800217a:	fbb3 f3f1 	udiv	r3, r3, r1
 800217e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002182:	4618      	mov	r0, r3
 8002184:	f000 f93b 	bl	80023fe <HAL_SYSTICK_Config>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e00e      	b.n	80021b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b0f      	cmp	r3, #15
 8002196:	d80a      	bhi.n	80021ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002198:	2200      	movs	r2, #0
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	f04f 30ff 	mov.w	r0, #4294967295
 80021a0:	f000 f911 	bl	80023c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021a4:	4a06      	ldr	r2, [pc, #24]	@ (80021c0 <HAL_InitTick+0x5c>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	e000      	b.n	80021b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20000004 	.word	0x20000004
 80021bc:	2000000c 	.word	0x2000000c
 80021c0:	20000008 	.word	0x20000008

080021c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021c8:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <HAL_IncTick+0x20>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	461a      	mov	r2, r3
 80021ce:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <HAL_IncTick+0x24>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4413      	add	r3, r2
 80021d4:	4a04      	ldr	r2, [pc, #16]	@ (80021e8 <HAL_IncTick+0x24>)
 80021d6:	6013      	str	r3, [r2, #0]
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	2000000c 	.word	0x2000000c
 80021e8:	20000170 	.word	0x20000170

080021ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return uwTick;
 80021f0:	4b03      	ldr	r3, [pc, #12]	@ (8002200 <HAL_GetTick+0x14>)
 80021f2:	681b      	ldr	r3, [r3, #0]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	20000170 	.word	0x20000170

08002204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800220c:	f7ff ffee 	bl	80021ec <HAL_GetTick>
 8002210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221c:	d005      	beq.n	800222a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800221e:	4b0a      	ldr	r3, [pc, #40]	@ (8002248 <HAL_Delay+0x44>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4413      	add	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800222a:	bf00      	nop
 800222c:	f7ff ffde 	bl	80021ec <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	429a      	cmp	r2, r3
 800223a:	d8f7      	bhi.n	800222c <HAL_Delay+0x28>
  {
  }
}
 800223c:	bf00      	nop
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	2000000c 	.word	0x2000000c

0800224c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800225c:	4b0c      	ldr	r3, [pc, #48]	@ (8002290 <__NVIC_SetPriorityGrouping+0x44>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002268:	4013      	ands	r3, r2
 800226a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002274:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800227c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800227e:	4a04      	ldr	r2, [pc, #16]	@ (8002290 <__NVIC_SetPriorityGrouping+0x44>)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	60d3      	str	r3, [r2, #12]
}
 8002284:	bf00      	nop
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002298:	4b04      	ldr	r3, [pc, #16]	@ (80022ac <__NVIC_GetPriorityGrouping+0x18>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	0a1b      	lsrs	r3, r3, #8
 800229e:	f003 0307 	and.w	r3, r3, #7
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	6039      	str	r1, [r7, #0]
 80022ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	db0a      	blt.n	80022da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	490c      	ldr	r1, [pc, #48]	@ (80022fc <__NVIC_SetPriority+0x4c>)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	0112      	lsls	r2, r2, #4
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	440b      	add	r3, r1
 80022d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d8:	e00a      	b.n	80022f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	4908      	ldr	r1, [pc, #32]	@ (8002300 <__NVIC_SetPriority+0x50>)
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	3b04      	subs	r3, #4
 80022e8:	0112      	lsls	r2, r2, #4
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	440b      	add	r3, r1
 80022ee:	761a      	strb	r2, [r3, #24]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000e100 	.word	0xe000e100
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002304:	b480      	push	{r7}
 8002306:	b089      	sub	sp, #36	@ 0x24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f1c3 0307 	rsb	r3, r3, #7
 800231e:	2b04      	cmp	r3, #4
 8002320:	bf28      	it	cs
 8002322:	2304      	movcs	r3, #4
 8002324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3304      	adds	r3, #4
 800232a:	2b06      	cmp	r3, #6
 800232c:	d902      	bls.n	8002334 <NVIC_EncodePriority+0x30>
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3b03      	subs	r3, #3
 8002332:	e000      	b.n	8002336 <NVIC_EncodePriority+0x32>
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002338:	f04f 32ff 	mov.w	r2, #4294967295
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43da      	mvns	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	401a      	ands	r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800234c:	f04f 31ff 	mov.w	r1, #4294967295
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	fa01 f303 	lsl.w	r3, r1, r3
 8002356:	43d9      	mvns	r1, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800235c:	4313      	orrs	r3, r2
         );
}
 800235e:	4618      	mov	r0, r3
 8002360:	3724      	adds	r7, #36	@ 0x24
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3b01      	subs	r3, #1
 8002378:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800237c:	d301      	bcc.n	8002382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800237e:	2301      	movs	r3, #1
 8002380:	e00f      	b.n	80023a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002382:	4a0a      	ldr	r2, [pc, #40]	@ (80023ac <SysTick_Config+0x40>)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3b01      	subs	r3, #1
 8002388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800238a:	210f      	movs	r1, #15
 800238c:	f04f 30ff 	mov.w	r0, #4294967295
 8002390:	f7ff ff8e 	bl	80022b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002394:	4b05      	ldr	r3, [pc, #20]	@ (80023ac <SysTick_Config+0x40>)
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800239a:	4b04      	ldr	r3, [pc, #16]	@ (80023ac <SysTick_Config+0x40>)
 800239c:	2207      	movs	r2, #7
 800239e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	e000e010 	.word	0xe000e010

080023b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff ff47 	bl	800224c <__NVIC_SetPriorityGrouping>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b086      	sub	sp, #24
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	4603      	mov	r3, r0
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	607a      	str	r2, [r7, #4]
 80023d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d8:	f7ff ff5c 	bl	8002294 <__NVIC_GetPriorityGrouping>
 80023dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68b9      	ldr	r1, [r7, #8]
 80023e2:	6978      	ldr	r0, [r7, #20]
 80023e4:	f7ff ff8e 	bl	8002304 <NVIC_EncodePriority>
 80023e8:	4602      	mov	r2, r0
 80023ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ee:	4611      	mov	r1, r2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff5d 	bl	80022b0 <__NVIC_SetPriority>
}
 80023f6:	bf00      	nop
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff ffb0 	bl	800236c <SysTick_Config>
 800240c:	4603      	mov	r3, r0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002418:	b480      	push	{r7}
 800241a:	b089      	sub	sp, #36	@ 0x24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800242a:	2300      	movs	r3, #0
 800242c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
 8002432:	e159      	b.n	80026e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002434:	2201      	movs	r2, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	4013      	ands	r3, r2
 8002446:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	429a      	cmp	r2, r3
 800244e:	f040 8148 	bne.w	80026e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	2b01      	cmp	r3, #1
 800245c:	d005      	beq.n	800246a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002466:	2b02      	cmp	r3, #2
 8002468:	d130      	bne.n	80024cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	2203      	movs	r2, #3
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024a0:	2201      	movs	r2, #1
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f003 0201 	and.w	r2, r3, #1
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d017      	beq.n	8002508 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	2203      	movs	r2, #3
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d123      	bne.n	800255c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	08da      	lsrs	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3208      	adds	r2, #8
 800251c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	220f      	movs	r2, #15
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	08da      	lsrs	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	3208      	adds	r2, #8
 8002556:	69b9      	ldr	r1, [r7, #24]
 8002558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	2203      	movs	r2, #3
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0203 	and.w	r2, r3, #3
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80a2 	beq.w	80026e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	4b57      	ldr	r3, [pc, #348]	@ (8002700 <HAL_GPIO_Init+0x2e8>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a6:	4a56      	ldr	r2, [pc, #344]	@ (8002700 <HAL_GPIO_Init+0x2e8>)
 80025a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ae:	4b54      	ldr	r3, [pc, #336]	@ (8002700 <HAL_GPIO_Init+0x2e8>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ba:	4a52      	ldr	r2, [pc, #328]	@ (8002704 <HAL_GPIO_Init+0x2ec>)
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	089b      	lsrs	r3, r3, #2
 80025c0:	3302      	adds	r3, #2
 80025c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	220f      	movs	r2, #15
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4013      	ands	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a49      	ldr	r2, [pc, #292]	@ (8002708 <HAL_GPIO_Init+0x2f0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d019      	beq.n	800261a <HAL_GPIO_Init+0x202>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a48      	ldr	r2, [pc, #288]	@ (800270c <HAL_GPIO_Init+0x2f4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d013      	beq.n	8002616 <HAL_GPIO_Init+0x1fe>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a47      	ldr	r2, [pc, #284]	@ (8002710 <HAL_GPIO_Init+0x2f8>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d00d      	beq.n	8002612 <HAL_GPIO_Init+0x1fa>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a46      	ldr	r2, [pc, #280]	@ (8002714 <HAL_GPIO_Init+0x2fc>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d007      	beq.n	800260e <HAL_GPIO_Init+0x1f6>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a45      	ldr	r2, [pc, #276]	@ (8002718 <HAL_GPIO_Init+0x300>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d101      	bne.n	800260a <HAL_GPIO_Init+0x1f2>
 8002606:	2304      	movs	r3, #4
 8002608:	e008      	b.n	800261c <HAL_GPIO_Init+0x204>
 800260a:	2307      	movs	r3, #7
 800260c:	e006      	b.n	800261c <HAL_GPIO_Init+0x204>
 800260e:	2303      	movs	r3, #3
 8002610:	e004      	b.n	800261c <HAL_GPIO_Init+0x204>
 8002612:	2302      	movs	r3, #2
 8002614:	e002      	b.n	800261c <HAL_GPIO_Init+0x204>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <HAL_GPIO_Init+0x204>
 800261a:	2300      	movs	r3, #0
 800261c:	69fa      	ldr	r2, [r7, #28]
 800261e:	f002 0203 	and.w	r2, r2, #3
 8002622:	0092      	lsls	r2, r2, #2
 8002624:	4093      	lsls	r3, r2
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800262c:	4935      	ldr	r1, [pc, #212]	@ (8002704 <HAL_GPIO_Init+0x2ec>)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	089b      	lsrs	r3, r3, #2
 8002632:	3302      	adds	r3, #2
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800263a:	4b38      	ldr	r3, [pc, #224]	@ (800271c <HAL_GPIO_Init+0x304>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	43db      	mvns	r3, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800265e:	4a2f      	ldr	r2, [pc, #188]	@ (800271c <HAL_GPIO_Init+0x304>)
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002664:	4b2d      	ldr	r3, [pc, #180]	@ (800271c <HAL_GPIO_Init+0x304>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002688:	4a24      	ldr	r2, [pc, #144]	@ (800271c <HAL_GPIO_Init+0x304>)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800268e:	4b23      	ldr	r3, [pc, #140]	@ (800271c <HAL_GPIO_Init+0x304>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	43db      	mvns	r3, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4013      	ands	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026b2:	4a1a      	ldr	r2, [pc, #104]	@ (800271c <HAL_GPIO_Init+0x304>)
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026b8:	4b18      	ldr	r3, [pc, #96]	@ (800271c <HAL_GPIO_Init+0x304>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026dc:	4a0f      	ldr	r2, [pc, #60]	@ (800271c <HAL_GPIO_Init+0x304>)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3301      	adds	r3, #1
 80026e6:	61fb      	str	r3, [r7, #28]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	2b0f      	cmp	r3, #15
 80026ec:	f67f aea2 	bls.w	8002434 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026f0:	bf00      	nop
 80026f2:	bf00      	nop
 80026f4:	3724      	adds	r7, #36	@ 0x24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800
 8002704:	40013800 	.word	0x40013800
 8002708:	40020000 	.word	0x40020000
 800270c:	40020400 	.word	0x40020400
 8002710:	40020800 	.word	0x40020800
 8002714:	40020c00 	.word	0x40020c00
 8002718:	40021000 	.word	0x40021000
 800271c:	40013c00 	.word	0x40013c00

08002720 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e12b      	b.n	800298a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff fbee 	bl	8001f28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2224      	movs	r2, #36	@ 0x24
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0201 	bic.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002772:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002782:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002784:	f001 fc20 	bl	8003fc8 <HAL_RCC_GetPCLK1Freq>
 8002788:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	4a81      	ldr	r2, [pc, #516]	@ (8002994 <HAL_I2C_Init+0x274>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d807      	bhi.n	80027a4 <HAL_I2C_Init+0x84>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4a80      	ldr	r2, [pc, #512]	@ (8002998 <HAL_I2C_Init+0x278>)
 8002798:	4293      	cmp	r3, r2
 800279a:	bf94      	ite	ls
 800279c:	2301      	movls	r3, #1
 800279e:	2300      	movhi	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	e006      	b.n	80027b2 <HAL_I2C_Init+0x92>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4a7d      	ldr	r2, [pc, #500]	@ (800299c <HAL_I2C_Init+0x27c>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	bf94      	ite	ls
 80027ac:	2301      	movls	r3, #1
 80027ae:	2300      	movhi	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e0e7      	b.n	800298a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4a78      	ldr	r2, [pc, #480]	@ (80029a0 <HAL_I2C_Init+0x280>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	0c9b      	lsrs	r3, r3, #18
 80027c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	4a6a      	ldr	r2, [pc, #424]	@ (8002994 <HAL_I2C_Init+0x274>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d802      	bhi.n	80027f4 <HAL_I2C_Init+0xd4>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	3301      	adds	r3, #1
 80027f2:	e009      	b.n	8002808 <HAL_I2C_Init+0xe8>
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027fa:	fb02 f303 	mul.w	r3, r2, r3
 80027fe:	4a69      	ldr	r2, [pc, #420]	@ (80029a4 <HAL_I2C_Init+0x284>)
 8002800:	fba2 2303 	umull	r2, r3, r2, r3
 8002804:	099b      	lsrs	r3, r3, #6
 8002806:	3301      	adds	r3, #1
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	430b      	orrs	r3, r1
 800280e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800281a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	495c      	ldr	r1, [pc, #368]	@ (8002994 <HAL_I2C_Init+0x274>)
 8002824:	428b      	cmp	r3, r1
 8002826:	d819      	bhi.n	800285c <HAL_I2C_Init+0x13c>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1e59      	subs	r1, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	fbb1 f3f3 	udiv	r3, r1, r3
 8002836:	1c59      	adds	r1, r3, #1
 8002838:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800283c:	400b      	ands	r3, r1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00a      	beq.n	8002858 <HAL_I2C_Init+0x138>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1e59      	subs	r1, r3, #1
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002850:	3301      	adds	r3, #1
 8002852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002856:	e051      	b.n	80028fc <HAL_I2C_Init+0x1dc>
 8002858:	2304      	movs	r3, #4
 800285a:	e04f      	b.n	80028fc <HAL_I2C_Init+0x1dc>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d111      	bne.n	8002888 <HAL_I2C_Init+0x168>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1e58      	subs	r0, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6859      	ldr	r1, [r3, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	440b      	add	r3, r1
 8002872:	fbb0 f3f3 	udiv	r3, r0, r3
 8002876:	3301      	adds	r3, #1
 8002878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800287c:	2b00      	cmp	r3, #0
 800287e:	bf0c      	ite	eq
 8002880:	2301      	moveq	r3, #1
 8002882:	2300      	movne	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	e012      	b.n	80028ae <HAL_I2C_Init+0x18e>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	1e58      	subs	r0, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6859      	ldr	r1, [r3, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	0099      	lsls	r1, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	fbb0 f3f3 	udiv	r3, r0, r3
 800289e:	3301      	adds	r3, #1
 80028a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	bf0c      	ite	eq
 80028a8:	2301      	moveq	r3, #1
 80028aa:	2300      	movne	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_I2C_Init+0x196>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e022      	b.n	80028fc <HAL_I2C_Init+0x1dc>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10e      	bne.n	80028dc <HAL_I2C_Init+0x1bc>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1e58      	subs	r0, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6859      	ldr	r1, [r3, #4]
 80028c6:	460b      	mov	r3, r1
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	440b      	add	r3, r1
 80028cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80028d0:	3301      	adds	r3, #1
 80028d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028da:	e00f      	b.n	80028fc <HAL_I2C_Init+0x1dc>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	1e58      	subs	r0, r3, #1
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6859      	ldr	r1, [r3, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	0099      	lsls	r1, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f2:	3301      	adds	r3, #1
 80028f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	6809      	ldr	r1, [r1, #0]
 8002900:	4313      	orrs	r3, r2
 8002902:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69da      	ldr	r2, [r3, #28]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800292a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6911      	ldr	r1, [r2, #16]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68d2      	ldr	r2, [r2, #12]
 8002936:	4311      	orrs	r1, r2
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	430b      	orrs	r3, r1
 800293e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	695a      	ldr	r2, [r3, #20]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2220      	movs	r2, #32
 8002976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	000186a0 	.word	0x000186a0
 8002998:	001e847f 	.word	0x001e847f
 800299c:	003d08ff 	.word	0x003d08ff
 80029a0:	431bde83 	.word	0x431bde83
 80029a4:	10624dd3 	.word	0x10624dd3

080029a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b088      	sub	sp, #32
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	4608      	mov	r0, r1
 80029b2:	4611      	mov	r1, r2
 80029b4:	461a      	mov	r2, r3
 80029b6:	4603      	mov	r3, r0
 80029b8:	817b      	strh	r3, [r7, #10]
 80029ba:	460b      	mov	r3, r1
 80029bc:	813b      	strh	r3, [r7, #8]
 80029be:	4613      	mov	r3, r2
 80029c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029c2:	f7ff fc13 	bl	80021ec <HAL_GetTick>
 80029c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b20      	cmp	r3, #32
 80029d2:	f040 80d9 	bne.w	8002b88 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	2319      	movs	r3, #25
 80029dc:	2201      	movs	r2, #1
 80029de:	496d      	ldr	r1, [pc, #436]	@ (8002b94 <HAL_I2C_Mem_Write+0x1ec>)
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 fc8b 	bl	80032fc <I2C_WaitOnFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80029ec:	2302      	movs	r3, #2
 80029ee:	e0cc      	b.n	8002b8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d101      	bne.n	80029fe <HAL_I2C_Mem_Write+0x56>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e0c5      	b.n	8002b8a <HAL_I2C_Mem_Write+0x1e2>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d007      	beq.n	8002a24 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2221      	movs	r2, #33	@ 0x21
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2240      	movs	r2, #64	@ 0x40
 8002a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6a3a      	ldr	r2, [r7, #32]
 8002a4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002a54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4a4d      	ldr	r2, [pc, #308]	@ (8002b98 <HAL_I2C_Mem_Write+0x1f0>)
 8002a64:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a66:	88f8      	ldrh	r0, [r7, #6]
 8002a68:	893a      	ldrh	r2, [r7, #8]
 8002a6a:	8979      	ldrh	r1, [r7, #10]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	9301      	str	r3, [sp, #4]
 8002a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	4603      	mov	r3, r0
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 fac2 	bl	8003000 <I2C_RequestMemoryWrite>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d052      	beq.n	8002b28 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e081      	b.n	8002b8a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 fd50 	bl	8003530 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00d      	beq.n	8002ab2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d107      	bne.n	8002aae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e06b      	b.n	8002b8a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab6:	781a      	ldrb	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d11b      	bne.n	8002b28 <HAL_I2C_Mem_Write+0x180>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d017      	beq.n	8002b28 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afc:	781a      	ldrb	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1aa      	bne.n	8002a86 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 fd43 	bl	80035c0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00d      	beq.n	8002b5c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d107      	bne.n	8002b58 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b56:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e016      	b.n	8002b8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	e000      	b.n	8002b8a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002b88:	2302      	movs	r3, #2
  }
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	00100002 	.word	0x00100002
 8002b98:	ffff0000 	.word	0xffff0000

08002b9c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08c      	sub	sp, #48	@ 0x30
 8002ba0:	af02      	add	r7, sp, #8
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	4608      	mov	r0, r1
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4603      	mov	r3, r0
 8002bac:	817b      	strh	r3, [r7, #10]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	813b      	strh	r3, [r7, #8]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bb6:	f7ff fb19 	bl	80021ec <HAL_GetTick>
 8002bba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b20      	cmp	r3, #32
 8002bc6:	f040 8214 	bne.w	8002ff2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	2319      	movs	r3, #25
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	497b      	ldr	r1, [pc, #492]	@ (8002dc0 <HAL_I2C_Mem_Read+0x224>)
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 fb91 	bl	80032fc <I2C_WaitOnFlagUntilTimeout>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002be0:	2302      	movs	r3, #2
 8002be2:	e207      	b.n	8002ff4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <HAL_I2C_Mem_Read+0x56>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e200      	b.n	8002ff4 <HAL_I2C_Mem_Read+0x458>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d007      	beq.n	8002c18 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2222      	movs	r2, #34	@ 0x22
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2240      	movs	r2, #64	@ 0x40
 8002c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002c48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4a5b      	ldr	r2, [pc, #364]	@ (8002dc4 <HAL_I2C_Mem_Read+0x228>)
 8002c58:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c5a:	88f8      	ldrh	r0, [r7, #6]
 8002c5c:	893a      	ldrh	r2, [r7, #8]
 8002c5e:	8979      	ldrh	r1, [r7, #10]
 8002c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c62:	9301      	str	r3, [sp, #4]
 8002c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	4603      	mov	r3, r0
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 fa5e 	bl	800312c <I2C_RequestMemoryRead>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e1bc      	b.n	8002ff4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d113      	bne.n	8002caa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c82:	2300      	movs	r3, #0
 8002c84:	623b      	str	r3, [r7, #32]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	623b      	str	r3, [r7, #32]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	623b      	str	r3, [r7, #32]
 8002c96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	e190      	b.n	8002fcc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d11b      	bne.n	8002cea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61fb      	str	r3, [r7, #28]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	61fb      	str	r3, [r7, #28]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	61fb      	str	r3, [r7, #28]
 8002cd6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	e170      	b.n	8002fcc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d11b      	bne.n	8002d2a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d12:	2300      	movs	r3, #0
 8002d14:	61bb      	str	r3, [r7, #24]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	61bb      	str	r3, [r7, #24]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	61bb      	str	r3, [r7, #24]
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	e150      	b.n	8002fcc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d40:	e144      	b.n	8002fcc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	f200 80f1 	bhi.w	8002f2e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d123      	bne.n	8002d9c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d56:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 fc79 	bl	8003650 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e145      	b.n	8002ff4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691a      	ldr	r2, [r3, #16]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	3b01      	subs	r3, #1
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d9a:	e117      	b.n	8002fcc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d14e      	bne.n	8002e42 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002daa:	2200      	movs	r2, #0
 8002dac:	4906      	ldr	r1, [pc, #24]	@ (8002dc8 <HAL_I2C_Mem_Read+0x22c>)
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 faa4 	bl	80032fc <I2C_WaitOnFlagUntilTimeout>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d008      	beq.n	8002dcc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e11a      	b.n	8002ff4 <HAL_I2C_Mem_Read+0x458>
 8002dbe:	bf00      	nop
 8002dc0:	00100002 	.word	0x00100002
 8002dc4:	ffff0000 	.word	0xffff0000
 8002dc8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	691a      	ldr	r2, [r3, #16]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	3b01      	subs	r3, #1
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	691a      	ldr	r2, [r3, #16]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e40:	e0c4      	b.n	8002fcc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e48:	2200      	movs	r2, #0
 8002e4a:	496c      	ldr	r1, [pc, #432]	@ (8002ffc <HAL_I2C_Mem_Read+0x460>)
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 fa55 	bl	80032fc <I2C_WaitOnFlagUntilTimeout>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e0cb      	b.n	8002ff4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	691a      	ldr	r2, [r3, #16]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	4955      	ldr	r1, [pc, #340]	@ (8002ffc <HAL_I2C_Mem_Read+0x460>)
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 fa27 	bl	80032fc <I2C_WaitOnFlagUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e09d      	b.n	8002ff4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ec6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691a      	ldr	r2, [r3, #16]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eda:	1c5a      	adds	r2, r3, #1
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	691a      	ldr	r2, [r3, #16]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f04:	b2d2      	uxtb	r2, r2
 8002f06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0c:	1c5a      	adds	r2, r3, #1
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f16:	3b01      	subs	r3, #1
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f2c:	e04e      	b.n	8002fcc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f30:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 fb8c 	bl	8003650 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e058      	b.n	8002ff4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	691a      	ldr	r2, [r3, #16]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d124      	bne.n	8002fcc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f86:	2b03      	cmp	r3, #3
 8002f88:	d107      	bne.n	8002f9a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f98:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f47f aeb6 	bne.w	8002d42 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	e000      	b.n	8002ff4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002ff2:	2302      	movs	r3, #2
  }
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3728      	adds	r7, #40	@ 0x28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	00010004 	.word	0x00010004

08003000 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af02      	add	r7, sp, #8
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	4608      	mov	r0, r1
 800300a:	4611      	mov	r1, r2
 800300c:	461a      	mov	r2, r3
 800300e:	4603      	mov	r3, r0
 8003010:	817b      	strh	r3, [r7, #10]
 8003012:	460b      	mov	r3, r1
 8003014:	813b      	strh	r3, [r7, #8]
 8003016:	4613      	mov	r3, r2
 8003018:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003028:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800302a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	2200      	movs	r2, #0
 8003032:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f960 	bl	80032fc <I2C_WaitOnFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00d      	beq.n	800305e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800304c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003050:	d103      	bne.n	800305a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003058:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e05f      	b.n	800311e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800305e:	897b      	ldrh	r3, [r7, #10]
 8003060:	b2db      	uxtb	r3, r3
 8003062:	461a      	mov	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800306c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800306e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003070:	6a3a      	ldr	r2, [r7, #32]
 8003072:	492d      	ldr	r1, [pc, #180]	@ (8003128 <I2C_RequestMemoryWrite+0x128>)
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 f9bb 	bl	80033f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e04c      	b.n	800311e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800309a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800309c:	6a39      	ldr	r1, [r7, #32]
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 fa46 	bl	8003530 <I2C_WaitOnTXEFlagUntilTimeout>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00d      	beq.n	80030c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d107      	bne.n	80030c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e02b      	b.n	800311e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d105      	bne.n	80030d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030cc:	893b      	ldrh	r3, [r7, #8]
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	611a      	str	r2, [r3, #16]
 80030d6:	e021      	b.n	800311c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030d8:	893b      	ldrh	r3, [r7, #8]
 80030da:	0a1b      	lsrs	r3, r3, #8
 80030dc:	b29b      	uxth	r3, r3
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030e8:	6a39      	ldr	r1, [r7, #32]
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 fa20 	bl	8003530 <I2C_WaitOnTXEFlagUntilTimeout>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00d      	beq.n	8003112 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d107      	bne.n	800310e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800310c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e005      	b.n	800311e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003112:	893b      	ldrh	r3, [r7, #8]
 8003114:	b2da      	uxtb	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	00010002 	.word	0x00010002

0800312c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af02      	add	r7, sp, #8
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	4608      	mov	r0, r1
 8003136:	4611      	mov	r1, r2
 8003138:	461a      	mov	r2, r3
 800313a:	4603      	mov	r3, r0
 800313c:	817b      	strh	r3, [r7, #10]
 800313e:	460b      	mov	r3, r1
 8003140:	813b      	strh	r3, [r7, #8]
 8003142:	4613      	mov	r3, r2
 8003144:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003154:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003164:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	2200      	movs	r2, #0
 800316e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 f8c2 	bl	80032fc <I2C_WaitOnFlagUntilTimeout>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00d      	beq.n	800319a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003188:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800318c:	d103      	bne.n	8003196 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003194:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e0aa      	b.n	80032f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800319a:	897b      	ldrh	r3, [r7, #10]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	461a      	mov	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80031a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ac:	6a3a      	ldr	r2, [r7, #32]
 80031ae:	4952      	ldr	r1, [pc, #328]	@ (80032f8 <I2C_RequestMemoryRead+0x1cc>)
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 f91d 	bl	80033f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e097      	b.n	80032f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031d8:	6a39      	ldr	r1, [r7, #32]
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f9a8 	bl	8003530 <I2C_WaitOnTXEFlagUntilTimeout>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00d      	beq.n	8003202 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d107      	bne.n	80031fe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e076      	b.n	80032f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003202:	88fb      	ldrh	r3, [r7, #6]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d105      	bne.n	8003214 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003208:	893b      	ldrh	r3, [r7, #8]
 800320a:	b2da      	uxtb	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	611a      	str	r2, [r3, #16]
 8003212:	e021      	b.n	8003258 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003214:	893b      	ldrh	r3, [r7, #8]
 8003216:	0a1b      	lsrs	r3, r3, #8
 8003218:	b29b      	uxth	r3, r3
 800321a:	b2da      	uxtb	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003224:	6a39      	ldr	r1, [r7, #32]
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 f982 	bl	8003530 <I2C_WaitOnTXEFlagUntilTimeout>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00d      	beq.n	800324e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003236:	2b04      	cmp	r3, #4
 8003238:	d107      	bne.n	800324a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003248:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e050      	b.n	80032f0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800324e:	893b      	ldrh	r3, [r7, #8]
 8003250:	b2da      	uxtb	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800325a:	6a39      	ldr	r1, [r7, #32]
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 f967 	bl	8003530 <I2C_WaitOnTXEFlagUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00d      	beq.n	8003284 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326c:	2b04      	cmp	r3, #4
 800326e:	d107      	bne.n	8003280 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800327e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e035      	b.n	80032f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003292:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	2200      	movs	r2, #0
 800329c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 f82b 	bl	80032fc <I2C_WaitOnFlagUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00d      	beq.n	80032c8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032ba:	d103      	bne.n	80032c4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e013      	b.n	80032f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032c8:	897b      	ldrh	r3, [r7, #10]
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032da:	6a3a      	ldr	r2, [r7, #32]
 80032dc:	4906      	ldr	r1, [pc, #24]	@ (80032f8 <I2C_RequestMemoryRead+0x1cc>)
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 f886 	bl	80033f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	00010002 	.word	0x00010002

080032fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	603b      	str	r3, [r7, #0]
 8003308:	4613      	mov	r3, r2
 800330a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800330c:	e048      	b.n	80033a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003314:	d044      	beq.n	80033a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003316:	f7fe ff69 	bl	80021ec <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d302      	bcc.n	800332c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d139      	bne.n	80033a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	0c1b      	lsrs	r3, r3, #16
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b01      	cmp	r3, #1
 8003334:	d10d      	bne.n	8003352 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	43da      	mvns	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	4013      	ands	r3, r2
 8003342:	b29b      	uxth	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	bf0c      	ite	eq
 8003348:	2301      	moveq	r3, #1
 800334a:	2300      	movne	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	461a      	mov	r2, r3
 8003350:	e00c      	b.n	800336c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	43da      	mvns	r2, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	4013      	ands	r3, r2
 800335e:	b29b      	uxth	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	bf0c      	ite	eq
 8003364:	2301      	moveq	r3, #1
 8003366:	2300      	movne	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	461a      	mov	r2, r3
 800336c:	79fb      	ldrb	r3, [r7, #7]
 800336e:	429a      	cmp	r2, r3
 8003370:	d116      	bne.n	80033a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338c:	f043 0220 	orr.w	r2, r3, #32
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e023      	b.n	80033e8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	0c1b      	lsrs	r3, r3, #16
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d10d      	bne.n	80033c6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	43da      	mvns	r2, r3
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	4013      	ands	r3, r2
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	bf0c      	ite	eq
 80033bc:	2301      	moveq	r3, #1
 80033be:	2300      	movne	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	461a      	mov	r2, r3
 80033c4:	e00c      	b.n	80033e0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	43da      	mvns	r2, r3
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	4013      	ands	r3, r2
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	bf0c      	ite	eq
 80033d8:	2301      	moveq	r3, #1
 80033da:	2300      	movne	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	461a      	mov	r2, r3
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d093      	beq.n	800330e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033fe:	e071      	b.n	80034e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800340a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800340e:	d123      	bne.n	8003458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800341e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003428:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003444:	f043 0204 	orr.w	r2, r3, #4
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e067      	b.n	8003528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345e:	d041      	beq.n	80034e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003460:	f7fe fec4 	bl	80021ec <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	429a      	cmp	r2, r3
 800346e:	d302      	bcc.n	8003476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d136      	bne.n	80034e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	0c1b      	lsrs	r3, r3, #16
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b01      	cmp	r3, #1
 800347e:	d10c      	bne.n	800349a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	43da      	mvns	r2, r3
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	4013      	ands	r3, r2
 800348c:	b29b      	uxth	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	bf14      	ite	ne
 8003492:	2301      	movne	r3, #1
 8003494:	2300      	moveq	r3, #0
 8003496:	b2db      	uxtb	r3, r3
 8003498:	e00b      	b.n	80034b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	43da      	mvns	r2, r3
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	4013      	ands	r3, r2
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	bf14      	ite	ne
 80034ac:	2301      	movne	r3, #1
 80034ae:	2300      	moveq	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d016      	beq.n	80034e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2220      	movs	r2, #32
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d0:	f043 0220 	orr.w	r2, r3, #32
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e021      	b.n	8003528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	0c1b      	lsrs	r3, r3, #16
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d10c      	bne.n	8003508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	43da      	mvns	r2, r3
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	4013      	ands	r3, r2
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	bf14      	ite	ne
 8003500:	2301      	movne	r3, #1
 8003502:	2300      	moveq	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	e00b      	b.n	8003520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	43da      	mvns	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4013      	ands	r3, r2
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	bf14      	ite	ne
 800351a:	2301      	movne	r3, #1
 800351c:	2300      	moveq	r3, #0
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	f47f af6d 	bne.w	8003400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800353c:	e034      	b.n	80035a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 f8e3 	bl	800370a <I2C_IsAcknowledgeFailed>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e034      	b.n	80035b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003554:	d028      	beq.n	80035a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003556:	f7fe fe49 	bl	80021ec <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	429a      	cmp	r2, r3
 8003564:	d302      	bcc.n	800356c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d11d      	bne.n	80035a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003576:	2b80      	cmp	r3, #128	@ 0x80
 8003578:	d016      	beq.n	80035a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2220      	movs	r2, #32
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003594:	f043 0220 	orr.w	r2, r3, #32
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e007      	b.n	80035b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035b2:	2b80      	cmp	r3, #128	@ 0x80
 80035b4:	d1c3      	bne.n	800353e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035cc:	e034      	b.n	8003638 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 f89b 	bl	800370a <I2C_IsAcknowledgeFailed>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e034      	b.n	8003648 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e4:	d028      	beq.n	8003638 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e6:	f7fe fe01 	bl	80021ec <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d302      	bcc.n	80035fc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d11d      	bne.n	8003638 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	2b04      	cmp	r3, #4
 8003608:	d016      	beq.n	8003638 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003624:	f043 0220 	orr.w	r2, r3, #32
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e007      	b.n	8003648 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	2b04      	cmp	r3, #4
 8003644:	d1c3      	bne.n	80035ce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800365c:	e049      	b.n	80036f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	f003 0310 	and.w	r3, r3, #16
 8003668:	2b10      	cmp	r3, #16
 800366a:	d119      	bne.n	80036a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f06f 0210 	mvn.w	r2, #16
 8003674:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e030      	b.n	8003702 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a0:	f7fe fda4 	bl	80021ec <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d302      	bcc.n	80036b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d11d      	bne.n	80036f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036c0:	2b40      	cmp	r3, #64	@ 0x40
 80036c2:	d016      	beq.n	80036f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2220      	movs	r2, #32
 80036ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036de:	f043 0220 	orr.w	r2, r3, #32
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e007      	b.n	8003702 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036fc:	2b40      	cmp	r3, #64	@ 0x40
 80036fe:	d1ae      	bne.n	800365e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800371c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003720:	d11b      	bne.n	800375a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800372a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2220      	movs	r2, #32
 8003736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003746:	f043 0204 	orr.w	r2, r3, #4
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e267      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d075      	beq.n	8003872 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003786:	4b88      	ldr	r3, [pc, #544]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b04      	cmp	r3, #4
 8003790:	d00c      	beq.n	80037ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003792:	4b85      	ldr	r3, [pc, #532]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800379a:	2b08      	cmp	r3, #8
 800379c:	d112      	bne.n	80037c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800379e:	4b82      	ldr	r3, [pc, #520]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037aa:	d10b      	bne.n	80037c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ac:	4b7e      	ldr	r3, [pc, #504]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d05b      	beq.n	8003870 <HAL_RCC_OscConfig+0x108>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d157      	bne.n	8003870 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e242      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037cc:	d106      	bne.n	80037dc <HAL_RCC_OscConfig+0x74>
 80037ce:	4b76      	ldr	r3, [pc, #472]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a75      	ldr	r2, [pc, #468]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	e01d      	b.n	8003818 <HAL_RCC_OscConfig+0xb0>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037e4:	d10c      	bne.n	8003800 <HAL_RCC_OscConfig+0x98>
 80037e6:	4b70      	ldr	r3, [pc, #448]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a6f      	ldr	r2, [pc, #444]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	4b6d      	ldr	r3, [pc, #436]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a6c      	ldr	r2, [pc, #432]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	e00b      	b.n	8003818 <HAL_RCC_OscConfig+0xb0>
 8003800:	4b69      	ldr	r3, [pc, #420]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a68      	ldr	r2, [pc, #416]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003806:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	4b66      	ldr	r3, [pc, #408]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a65      	ldr	r2, [pc, #404]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003812:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d013      	beq.n	8003848 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003820:	f7fe fce4 	bl	80021ec <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003828:	f7fe fce0 	bl	80021ec <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b64      	cmp	r3, #100	@ 0x64
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e207      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383a:	4b5b      	ldr	r3, [pc, #364]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f0      	beq.n	8003828 <HAL_RCC_OscConfig+0xc0>
 8003846:	e014      	b.n	8003872 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003848:	f7fe fcd0 	bl	80021ec <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003850:	f7fe fccc 	bl	80021ec <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b64      	cmp	r3, #100	@ 0x64
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e1f3      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003862:	4b51      	ldr	r3, [pc, #324]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1f0      	bne.n	8003850 <HAL_RCC_OscConfig+0xe8>
 800386e:	e000      	b.n	8003872 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d063      	beq.n	8003946 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800387e:	4b4a      	ldr	r3, [pc, #296]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 030c 	and.w	r3, r3, #12
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00b      	beq.n	80038a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800388a:	4b47      	ldr	r3, [pc, #284]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003892:	2b08      	cmp	r3, #8
 8003894:	d11c      	bne.n	80038d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003896:	4b44      	ldr	r3, [pc, #272]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d116      	bne.n	80038d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038a2:	4b41      	ldr	r3, [pc, #260]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d005      	beq.n	80038ba <HAL_RCC_OscConfig+0x152>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d001      	beq.n	80038ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e1c7      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ba:	4b3b      	ldr	r3, [pc, #236]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4937      	ldr	r1, [pc, #220]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ce:	e03a      	b.n	8003946 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d020      	beq.n	800391a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038d8:	4b34      	ldr	r3, [pc, #208]	@ (80039ac <HAL_RCC_OscConfig+0x244>)
 80038da:	2201      	movs	r2, #1
 80038dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038de:	f7fe fc85 	bl	80021ec <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038e6:	f7fe fc81 	bl	80021ec <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e1a8      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f8:	4b2b      	ldr	r3, [pc, #172]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0f0      	beq.n	80038e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003904:	4b28      	ldr	r3, [pc, #160]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	4925      	ldr	r1, [pc, #148]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003914:	4313      	orrs	r3, r2
 8003916:	600b      	str	r3, [r1, #0]
 8003918:	e015      	b.n	8003946 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800391a:	4b24      	ldr	r3, [pc, #144]	@ (80039ac <HAL_RCC_OscConfig+0x244>)
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003920:	f7fe fc64 	bl	80021ec <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003928:	f7fe fc60 	bl	80021ec <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e187      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800393a:	4b1b      	ldr	r3, [pc, #108]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d036      	beq.n	80039c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d016      	beq.n	8003988 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800395a:	4b15      	ldr	r3, [pc, #84]	@ (80039b0 <HAL_RCC_OscConfig+0x248>)
 800395c:	2201      	movs	r2, #1
 800395e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003960:	f7fe fc44 	bl	80021ec <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003968:	f7fe fc40 	bl	80021ec <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e167      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800397a:	4b0b      	ldr	r3, [pc, #44]	@ (80039a8 <HAL_RCC_OscConfig+0x240>)
 800397c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCC_OscConfig+0x200>
 8003986:	e01b      	b.n	80039c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003988:	4b09      	ldr	r3, [pc, #36]	@ (80039b0 <HAL_RCC_OscConfig+0x248>)
 800398a:	2200      	movs	r2, #0
 800398c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800398e:	f7fe fc2d 	bl	80021ec <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003994:	e00e      	b.n	80039b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003996:	f7fe fc29 	bl	80021ec <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d907      	bls.n	80039b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e150      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
 80039a8:	40023800 	.word	0x40023800
 80039ac:	42470000 	.word	0x42470000
 80039b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b4:	4b88      	ldr	r3, [pc, #544]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 80039b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1ea      	bne.n	8003996 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 8097 	beq.w	8003afc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ce:	2300      	movs	r3, #0
 80039d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039d2:	4b81      	ldr	r3, [pc, #516]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10f      	bne.n	80039fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039de:	2300      	movs	r3, #0
 80039e0:	60bb      	str	r3, [r7, #8]
 80039e2:	4b7d      	ldr	r3, [pc, #500]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 80039e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e6:	4a7c      	ldr	r2, [pc, #496]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 80039e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80039ee:	4b7a      	ldr	r3, [pc, #488]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 80039f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f6:	60bb      	str	r3, [r7, #8]
 80039f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039fa:	2301      	movs	r3, #1
 80039fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fe:	4b77      	ldr	r3, [pc, #476]	@ (8003bdc <HAL_RCC_OscConfig+0x474>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d118      	bne.n	8003a3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a0a:	4b74      	ldr	r3, [pc, #464]	@ (8003bdc <HAL_RCC_OscConfig+0x474>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a73      	ldr	r2, [pc, #460]	@ (8003bdc <HAL_RCC_OscConfig+0x474>)
 8003a10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a16:	f7fe fbe9 	bl	80021ec <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1e:	f7fe fbe5 	bl	80021ec <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e10c      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a30:	4b6a      	ldr	r3, [pc, #424]	@ (8003bdc <HAL_RCC_OscConfig+0x474>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0f0      	beq.n	8003a1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d106      	bne.n	8003a52 <HAL_RCC_OscConfig+0x2ea>
 8003a44:	4b64      	ldr	r3, [pc, #400]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a48:	4a63      	ldr	r2, [pc, #396]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a50:	e01c      	b.n	8003a8c <HAL_RCC_OscConfig+0x324>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b05      	cmp	r3, #5
 8003a58:	d10c      	bne.n	8003a74 <HAL_RCC_OscConfig+0x30c>
 8003a5a:	4b5f      	ldr	r3, [pc, #380]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5e:	4a5e      	ldr	r2, [pc, #376]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a60:	f043 0304 	orr.w	r3, r3, #4
 8003a64:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a66:	4b5c      	ldr	r3, [pc, #368]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a6a:	4a5b      	ldr	r2, [pc, #364]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a6c:	f043 0301 	orr.w	r3, r3, #1
 8003a70:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a72:	e00b      	b.n	8003a8c <HAL_RCC_OscConfig+0x324>
 8003a74:	4b58      	ldr	r3, [pc, #352]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a78:	4a57      	ldr	r2, [pc, #348]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a7a:	f023 0301 	bic.w	r3, r3, #1
 8003a7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a80:	4b55      	ldr	r3, [pc, #340]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a84:	4a54      	ldr	r2, [pc, #336]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a86:	f023 0304 	bic.w	r3, r3, #4
 8003a8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d015      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a94:	f7fe fbaa 	bl	80021ec <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9a:	e00a      	b.n	8003ab2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a9c:	f7fe fba6 	bl	80021ec <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e0cb      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab2:	4b49      	ldr	r3, [pc, #292]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0ee      	beq.n	8003a9c <HAL_RCC_OscConfig+0x334>
 8003abe:	e014      	b.n	8003aea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac0:	f7fe fb94 	bl	80021ec <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac6:	e00a      	b.n	8003ade <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac8:	f7fe fb90 	bl	80021ec <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e0b5      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ade:	4b3e      	ldr	r3, [pc, #248]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1ee      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003aea:	7dfb      	ldrb	r3, [r7, #23]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d105      	bne.n	8003afc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af0:	4b39      	ldr	r3, [pc, #228]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af4:	4a38      	ldr	r2, [pc, #224]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003af6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003afa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 80a1 	beq.w	8003c48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b06:	4b34      	ldr	r3, [pc, #208]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 030c 	and.w	r3, r3, #12
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d05c      	beq.n	8003bcc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d141      	bne.n	8003b9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1a:	4b31      	ldr	r3, [pc, #196]	@ (8003be0 <HAL_RCC_OscConfig+0x478>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b20:	f7fe fb64 	bl	80021ec <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b28:	f7fe fb60 	bl	80021ec <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e087      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3a:	4b27      	ldr	r3, [pc, #156]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	69da      	ldr	r2, [r3, #28]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b54:	019b      	lsls	r3, r3, #6
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5c:	085b      	lsrs	r3, r3, #1
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	041b      	lsls	r3, r3, #16
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b68:	061b      	lsls	r3, r3, #24
 8003b6a:	491b      	ldr	r1, [pc, #108]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b70:	4b1b      	ldr	r3, [pc, #108]	@ (8003be0 <HAL_RCC_OscConfig+0x478>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b76:	f7fe fb39 	bl	80021ec <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b7e:	f7fe fb35 	bl	80021ec <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e05c      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b90:	4b11      	ldr	r3, [pc, #68]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0f0      	beq.n	8003b7e <HAL_RCC_OscConfig+0x416>
 8003b9c:	e054      	b.n	8003c48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b9e:	4b10      	ldr	r3, [pc, #64]	@ (8003be0 <HAL_RCC_OscConfig+0x478>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba4:	f7fe fb22 	bl	80021ec <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bac:	f7fe fb1e 	bl	80021ec <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e045      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bbe:	4b06      	ldr	r3, [pc, #24]	@ (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0x444>
 8003bca:	e03d      	b.n	8003c48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d107      	bne.n	8003be4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e038      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	40007000 	.word	0x40007000
 8003be0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003be4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c54 <HAL_RCC_OscConfig+0x4ec>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d028      	beq.n	8003c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d121      	bne.n	8003c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d11a      	bne.n	8003c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c14:	4013      	ands	r3, r2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d111      	bne.n	8003c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2a:	085b      	lsrs	r3, r3, #1
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d107      	bne.n	8003c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d001      	beq.n	8003c48 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e000      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40023800 	.word	0x40023800

08003c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0cc      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c6c:	4b68      	ldr	r3, [pc, #416]	@ (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d90c      	bls.n	8003c94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7a:	4b65      	ldr	r3, [pc, #404]	@ (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c82:	4b63      	ldr	r3, [pc, #396]	@ (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d001      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0b8      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d020      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cac:	4b59      	ldr	r3, [pc, #356]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	4a58      	ldr	r2, [pc, #352]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cc4:	4b53      	ldr	r3, [pc, #332]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	4a52      	ldr	r2, [pc, #328]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003cce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd0:	4b50      	ldr	r3, [pc, #320]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	494d      	ldr	r1, [pc, #308]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d044      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d107      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf6:	4b47      	ldr	r3, [pc, #284]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d119      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e07f      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d003      	beq.n	8003d16 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d107      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d16:	4b3f      	ldr	r3, [pc, #252]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d109      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e06f      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d26:	4b3b      	ldr	r3, [pc, #236]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e067      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d36:	4b37      	ldr	r3, [pc, #220]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f023 0203 	bic.w	r2, r3, #3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	4934      	ldr	r1, [pc, #208]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d48:	f7fe fa50 	bl	80021ec <HAL_GetTick>
 8003d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4e:	e00a      	b.n	8003d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d50:	f7fe fa4c 	bl	80021ec <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e04f      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d66:	4b2b      	ldr	r3, [pc, #172]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 020c 	and.w	r2, r3, #12
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d1eb      	bne.n	8003d50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d78:	4b25      	ldr	r3, [pc, #148]	@ (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d20c      	bcs.n	8003da0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d86:	4b22      	ldr	r3, [pc, #136]	@ (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8e:	4b20      	ldr	r3, [pc, #128]	@ (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d001      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e032      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d008      	beq.n	8003dbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dac:	4b19      	ldr	r3, [pc, #100]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4916      	ldr	r1, [pc, #88]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d009      	beq.n	8003dde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dca:	4b12      	ldr	r3, [pc, #72]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	490e      	ldr	r1, [pc, #56]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dde:	f000 f821 	bl	8003e24 <HAL_RCC_GetSysClockFreq>
 8003de2:	4602      	mov	r2, r0
 8003de4:	4b0b      	ldr	r3, [pc, #44]	@ (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	091b      	lsrs	r3, r3, #4
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	490a      	ldr	r1, [pc, #40]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c0>)
 8003df0:	5ccb      	ldrb	r3, [r1, r3]
 8003df2:	fa22 f303 	lsr.w	r3, r2, r3
 8003df6:	4a09      	ldr	r2, [pc, #36]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003dfa:	4b09      	ldr	r3, [pc, #36]	@ (8003e20 <HAL_RCC_ClockConfig+0x1c8>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fe f9b0 	bl	8002164 <HAL_InitTick>

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40023c00 	.word	0x40023c00
 8003e14:	40023800 	.word	0x40023800
 8003e18:	080054e0 	.word	0x080054e0
 8003e1c:	20000004 	.word	0x20000004
 8003e20:	20000008 	.word	0x20000008

08003e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e28:	b090      	sub	sp, #64	@ 0x40
 8003e2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e3c:	4b59      	ldr	r3, [pc, #356]	@ (8003fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 030c 	and.w	r3, r3, #12
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d00d      	beq.n	8003e64 <HAL_RCC_GetSysClockFreq+0x40>
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	f200 80a1 	bhi.w	8003f90 <HAL_RCC_GetSysClockFreq+0x16c>
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d002      	beq.n	8003e58 <HAL_RCC_GetSysClockFreq+0x34>
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d003      	beq.n	8003e5e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e56:	e09b      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e58:	4b53      	ldr	r3, [pc, #332]	@ (8003fa8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e5c:	e09b      	b.n	8003f96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e5e:	4b53      	ldr	r3, [pc, #332]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x188>)
 8003e60:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e62:	e098      	b.n	8003f96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e64:	4b4f      	ldr	r3, [pc, #316]	@ (8003fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e6c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e6e:	4b4d      	ldr	r3, [pc, #308]	@ (8003fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d028      	beq.n	8003ecc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e7a:	4b4a      	ldr	r3, [pc, #296]	@ (8003fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	099b      	lsrs	r3, r3, #6
 8003e80:	2200      	movs	r2, #0
 8003e82:	623b      	str	r3, [r7, #32]
 8003e84:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	4b47      	ldr	r3, [pc, #284]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x188>)
 8003e90:	fb03 f201 	mul.w	r2, r3, r1
 8003e94:	2300      	movs	r3, #0
 8003e96:	fb00 f303 	mul.w	r3, r0, r3
 8003e9a:	4413      	add	r3, r2
 8003e9c:	4a43      	ldr	r2, [pc, #268]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x188>)
 8003e9e:	fba0 1202 	umull	r1, r2, r0, r2
 8003ea2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ea4:	460a      	mov	r2, r1
 8003ea6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003ea8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003eaa:	4413      	add	r3, r2
 8003eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	61bb      	str	r3, [r7, #24]
 8003eb4:	61fa      	str	r2, [r7, #28]
 8003eb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003ebe:	f7fc fe97 	bl	8000bf0 <__aeabi_uldivmod>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003eca:	e053      	b.n	8003f74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ecc:	4b35      	ldr	r3, [pc, #212]	@ (8003fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	099b      	lsrs	r3, r3, #6
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	617a      	str	r2, [r7, #20]
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ede:	f04f 0b00 	mov.w	fp, #0
 8003ee2:	4652      	mov	r2, sl
 8003ee4:	465b      	mov	r3, fp
 8003ee6:	f04f 0000 	mov.w	r0, #0
 8003eea:	f04f 0100 	mov.w	r1, #0
 8003eee:	0159      	lsls	r1, r3, #5
 8003ef0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ef4:	0150      	lsls	r0, r2, #5
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	ebb2 080a 	subs.w	r8, r2, sl
 8003efe:	eb63 090b 	sbc.w	r9, r3, fp
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f16:	ebb2 0408 	subs.w	r4, r2, r8
 8003f1a:	eb63 0509 	sbc.w	r5, r3, r9
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	f04f 0300 	mov.w	r3, #0
 8003f26:	00eb      	lsls	r3, r5, #3
 8003f28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f2c:	00e2      	lsls	r2, r4, #3
 8003f2e:	4614      	mov	r4, r2
 8003f30:	461d      	mov	r5, r3
 8003f32:	eb14 030a 	adds.w	r3, r4, sl
 8003f36:	603b      	str	r3, [r7, #0]
 8003f38:	eb45 030b 	adc.w	r3, r5, fp
 8003f3c:	607b      	str	r3, [r7, #4]
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f4a:	4629      	mov	r1, r5
 8003f4c:	028b      	lsls	r3, r1, #10
 8003f4e:	4621      	mov	r1, r4
 8003f50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f54:	4621      	mov	r1, r4
 8003f56:	028a      	lsls	r2, r1, #10
 8003f58:	4610      	mov	r0, r2
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f5e:	2200      	movs	r2, #0
 8003f60:	60bb      	str	r3, [r7, #8]
 8003f62:	60fa      	str	r2, [r7, #12]
 8003f64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f68:	f7fc fe42 	bl	8000bf0 <__aeabi_uldivmod>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4613      	mov	r3, r2
 8003f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f74:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	0c1b      	lsrs	r3, r3, #16
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	3301      	adds	r3, #1
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003f84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f8e:	e002      	b.n	8003f96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f90:	4b05      	ldr	r3, [pc, #20]	@ (8003fa8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f92:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3740      	adds	r7, #64	@ 0x40
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	00f42400 	.word	0x00f42400
 8003fac:	017d7840 	.word	0x017d7840

08003fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fb4:	4b03      	ldr	r3, [pc, #12]	@ (8003fc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	20000004 	.word	0x20000004

08003fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fcc:	f7ff fff0 	bl	8003fb0 <HAL_RCC_GetHCLKFreq>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	4b05      	ldr	r3, [pc, #20]	@ (8003fe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	0a9b      	lsrs	r3, r3, #10
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	4903      	ldr	r1, [pc, #12]	@ (8003fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fde:	5ccb      	ldrb	r3, [r1, r3]
 8003fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	080054f0 	.word	0x080054f0

08003ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ff4:	f7ff ffdc 	bl	8003fb0 <HAL_RCC_GetHCLKFreq>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	4b05      	ldr	r3, [pc, #20]	@ (8004010 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	0b5b      	lsrs	r3, r3, #13
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	4903      	ldr	r1, [pc, #12]	@ (8004014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004006:	5ccb      	ldrb	r3, [r1, r3]
 8004008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800400c:	4618      	mov	r0, r3
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40023800 	.word	0x40023800
 8004014:	080054f0 	.word	0x080054f0

08004018 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e042      	b.n	80040b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d106      	bne.n	8004044 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7fd ffba 	bl	8001fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2224      	movs	r2, #36	@ 0x24
 8004048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68da      	ldr	r2, [r3, #12]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800405a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f82b 	bl	80040b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004070:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695a      	ldr	r2, [r3, #20]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004080:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004090:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2220      	movs	r2, #32
 800409c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2220      	movs	r2, #32
 80040a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040bc:	b0c0      	sub	sp, #256	@ 0x100
 80040be:	af00      	add	r7, sp, #0
 80040c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d4:	68d9      	ldr	r1, [r3, #12]
 80040d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	ea40 0301 	orr.w	r3, r0, r1
 80040e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	431a      	orrs	r2, r3
 80040f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	431a      	orrs	r2, r3
 80040f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004110:	f021 010c 	bic.w	r1, r1, #12
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800411e:	430b      	orrs	r3, r1
 8004120:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800412e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004132:	6999      	ldr	r1, [r3, #24]
 8004134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	ea40 0301 	orr.w	r3, r0, r1
 800413e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	4b8f      	ldr	r3, [pc, #572]	@ (8004384 <UART_SetConfig+0x2cc>)
 8004148:	429a      	cmp	r2, r3
 800414a:	d005      	beq.n	8004158 <UART_SetConfig+0xa0>
 800414c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	4b8d      	ldr	r3, [pc, #564]	@ (8004388 <UART_SetConfig+0x2d0>)
 8004154:	429a      	cmp	r2, r3
 8004156:	d104      	bne.n	8004162 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004158:	f7ff ff4a 	bl	8003ff0 <HAL_RCC_GetPCLK2Freq>
 800415c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004160:	e003      	b.n	800416a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004162:	f7ff ff31 	bl	8003fc8 <HAL_RCC_GetPCLK1Freq>
 8004166:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800416a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004174:	f040 810c 	bne.w	8004390 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004178:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800417c:	2200      	movs	r2, #0
 800417e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004182:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004186:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800418a:	4622      	mov	r2, r4
 800418c:	462b      	mov	r3, r5
 800418e:	1891      	adds	r1, r2, r2
 8004190:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004192:	415b      	adcs	r3, r3
 8004194:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004196:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800419a:	4621      	mov	r1, r4
 800419c:	eb12 0801 	adds.w	r8, r2, r1
 80041a0:	4629      	mov	r1, r5
 80041a2:	eb43 0901 	adc.w	r9, r3, r1
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041ba:	4690      	mov	r8, r2
 80041bc:	4699      	mov	r9, r3
 80041be:	4623      	mov	r3, r4
 80041c0:	eb18 0303 	adds.w	r3, r8, r3
 80041c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80041c8:	462b      	mov	r3, r5
 80041ca:	eb49 0303 	adc.w	r3, r9, r3
 80041ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80041d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80041de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80041e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80041e6:	460b      	mov	r3, r1
 80041e8:	18db      	adds	r3, r3, r3
 80041ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80041ec:	4613      	mov	r3, r2
 80041ee:	eb42 0303 	adc.w	r3, r2, r3
 80041f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80041f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80041f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80041fc:	f7fc fcf8 	bl	8000bf0 <__aeabi_uldivmod>
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	4b61      	ldr	r3, [pc, #388]	@ (800438c <UART_SetConfig+0x2d4>)
 8004206:	fba3 2302 	umull	r2, r3, r3, r2
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	011c      	lsls	r4, r3, #4
 800420e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004212:	2200      	movs	r2, #0
 8004214:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004218:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800421c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004220:	4642      	mov	r2, r8
 8004222:	464b      	mov	r3, r9
 8004224:	1891      	adds	r1, r2, r2
 8004226:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004228:	415b      	adcs	r3, r3
 800422a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800422c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004230:	4641      	mov	r1, r8
 8004232:	eb12 0a01 	adds.w	sl, r2, r1
 8004236:	4649      	mov	r1, r9
 8004238:	eb43 0b01 	adc.w	fp, r3, r1
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	f04f 0300 	mov.w	r3, #0
 8004244:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004248:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800424c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004250:	4692      	mov	sl, r2
 8004252:	469b      	mov	fp, r3
 8004254:	4643      	mov	r3, r8
 8004256:	eb1a 0303 	adds.w	r3, sl, r3
 800425a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800425e:	464b      	mov	r3, r9
 8004260:	eb4b 0303 	adc.w	r3, fp, r3
 8004264:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004274:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004278:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800427c:	460b      	mov	r3, r1
 800427e:	18db      	adds	r3, r3, r3
 8004280:	643b      	str	r3, [r7, #64]	@ 0x40
 8004282:	4613      	mov	r3, r2
 8004284:	eb42 0303 	adc.w	r3, r2, r3
 8004288:	647b      	str	r3, [r7, #68]	@ 0x44
 800428a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800428e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004292:	f7fc fcad 	bl	8000bf0 <__aeabi_uldivmod>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	4611      	mov	r1, r2
 800429c:	4b3b      	ldr	r3, [pc, #236]	@ (800438c <UART_SetConfig+0x2d4>)
 800429e:	fba3 2301 	umull	r2, r3, r3, r1
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	2264      	movs	r2, #100	@ 0x64
 80042a6:	fb02 f303 	mul.w	r3, r2, r3
 80042aa:	1acb      	subs	r3, r1, r3
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80042b2:	4b36      	ldr	r3, [pc, #216]	@ (800438c <UART_SetConfig+0x2d4>)
 80042b4:	fba3 2302 	umull	r2, r3, r3, r2
 80042b8:	095b      	lsrs	r3, r3, #5
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80042c0:	441c      	add	r4, r3
 80042c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042c6:	2200      	movs	r2, #0
 80042c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80042d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80042d4:	4642      	mov	r2, r8
 80042d6:	464b      	mov	r3, r9
 80042d8:	1891      	adds	r1, r2, r2
 80042da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80042dc:	415b      	adcs	r3, r3
 80042de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80042e4:	4641      	mov	r1, r8
 80042e6:	1851      	adds	r1, r2, r1
 80042e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80042ea:	4649      	mov	r1, r9
 80042ec:	414b      	adcs	r3, r1
 80042ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80042fc:	4659      	mov	r1, fp
 80042fe:	00cb      	lsls	r3, r1, #3
 8004300:	4651      	mov	r1, sl
 8004302:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004306:	4651      	mov	r1, sl
 8004308:	00ca      	lsls	r2, r1, #3
 800430a:	4610      	mov	r0, r2
 800430c:	4619      	mov	r1, r3
 800430e:	4603      	mov	r3, r0
 8004310:	4642      	mov	r2, r8
 8004312:	189b      	adds	r3, r3, r2
 8004314:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004318:	464b      	mov	r3, r9
 800431a:	460a      	mov	r2, r1
 800431c:	eb42 0303 	adc.w	r3, r2, r3
 8004320:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004330:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004334:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004338:	460b      	mov	r3, r1
 800433a:	18db      	adds	r3, r3, r3
 800433c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800433e:	4613      	mov	r3, r2
 8004340:	eb42 0303 	adc.w	r3, r2, r3
 8004344:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004346:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800434a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800434e:	f7fc fc4f 	bl	8000bf0 <__aeabi_uldivmod>
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	4b0d      	ldr	r3, [pc, #52]	@ (800438c <UART_SetConfig+0x2d4>)
 8004358:	fba3 1302 	umull	r1, r3, r3, r2
 800435c:	095b      	lsrs	r3, r3, #5
 800435e:	2164      	movs	r1, #100	@ 0x64
 8004360:	fb01 f303 	mul.w	r3, r1, r3
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	3332      	adds	r3, #50	@ 0x32
 800436a:	4a08      	ldr	r2, [pc, #32]	@ (800438c <UART_SetConfig+0x2d4>)
 800436c:	fba2 2303 	umull	r2, r3, r2, r3
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	f003 0207 	and.w	r2, r3, #7
 8004376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4422      	add	r2, r4
 800437e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004380:	e106      	b.n	8004590 <UART_SetConfig+0x4d8>
 8004382:	bf00      	nop
 8004384:	40011000 	.word	0x40011000
 8004388:	40011400 	.word	0x40011400
 800438c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004390:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004394:	2200      	movs	r2, #0
 8004396:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800439a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800439e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80043a2:	4642      	mov	r2, r8
 80043a4:	464b      	mov	r3, r9
 80043a6:	1891      	adds	r1, r2, r2
 80043a8:	6239      	str	r1, [r7, #32]
 80043aa:	415b      	adcs	r3, r3
 80043ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043b2:	4641      	mov	r1, r8
 80043b4:	1854      	adds	r4, r2, r1
 80043b6:	4649      	mov	r1, r9
 80043b8:	eb43 0501 	adc.w	r5, r3, r1
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	00eb      	lsls	r3, r5, #3
 80043c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043ca:	00e2      	lsls	r2, r4, #3
 80043cc:	4614      	mov	r4, r2
 80043ce:	461d      	mov	r5, r3
 80043d0:	4643      	mov	r3, r8
 80043d2:	18e3      	adds	r3, r4, r3
 80043d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80043d8:	464b      	mov	r3, r9
 80043da:	eb45 0303 	adc.w	r3, r5, r3
 80043de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80043e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80043fe:	4629      	mov	r1, r5
 8004400:	008b      	lsls	r3, r1, #2
 8004402:	4621      	mov	r1, r4
 8004404:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004408:	4621      	mov	r1, r4
 800440a:	008a      	lsls	r2, r1, #2
 800440c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004410:	f7fc fbee 	bl	8000bf0 <__aeabi_uldivmod>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	4b60      	ldr	r3, [pc, #384]	@ (800459c <UART_SetConfig+0x4e4>)
 800441a:	fba3 2302 	umull	r2, r3, r3, r2
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	011c      	lsls	r4, r3, #4
 8004422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004426:	2200      	movs	r2, #0
 8004428:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800442c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004430:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004434:	4642      	mov	r2, r8
 8004436:	464b      	mov	r3, r9
 8004438:	1891      	adds	r1, r2, r2
 800443a:	61b9      	str	r1, [r7, #24]
 800443c:	415b      	adcs	r3, r3
 800443e:	61fb      	str	r3, [r7, #28]
 8004440:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004444:	4641      	mov	r1, r8
 8004446:	1851      	adds	r1, r2, r1
 8004448:	6139      	str	r1, [r7, #16]
 800444a:	4649      	mov	r1, r9
 800444c:	414b      	adcs	r3, r1
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	f04f 0300 	mov.w	r3, #0
 8004458:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800445c:	4659      	mov	r1, fp
 800445e:	00cb      	lsls	r3, r1, #3
 8004460:	4651      	mov	r1, sl
 8004462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004466:	4651      	mov	r1, sl
 8004468:	00ca      	lsls	r2, r1, #3
 800446a:	4610      	mov	r0, r2
 800446c:	4619      	mov	r1, r3
 800446e:	4603      	mov	r3, r0
 8004470:	4642      	mov	r2, r8
 8004472:	189b      	adds	r3, r3, r2
 8004474:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004478:	464b      	mov	r3, r9
 800447a:	460a      	mov	r2, r1
 800447c:	eb42 0303 	adc.w	r3, r2, r3
 8004480:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800448e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800449c:	4649      	mov	r1, r9
 800449e:	008b      	lsls	r3, r1, #2
 80044a0:	4641      	mov	r1, r8
 80044a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044a6:	4641      	mov	r1, r8
 80044a8:	008a      	lsls	r2, r1, #2
 80044aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80044ae:	f7fc fb9f 	bl	8000bf0 <__aeabi_uldivmod>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4611      	mov	r1, r2
 80044b8:	4b38      	ldr	r3, [pc, #224]	@ (800459c <UART_SetConfig+0x4e4>)
 80044ba:	fba3 2301 	umull	r2, r3, r3, r1
 80044be:	095b      	lsrs	r3, r3, #5
 80044c0:	2264      	movs	r2, #100	@ 0x64
 80044c2:	fb02 f303 	mul.w	r3, r2, r3
 80044c6:	1acb      	subs	r3, r1, r3
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	3332      	adds	r3, #50	@ 0x32
 80044cc:	4a33      	ldr	r2, [pc, #204]	@ (800459c <UART_SetConfig+0x4e4>)
 80044ce:	fba2 2303 	umull	r2, r3, r2, r3
 80044d2:	095b      	lsrs	r3, r3, #5
 80044d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044d8:	441c      	add	r4, r3
 80044da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044de:	2200      	movs	r2, #0
 80044e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80044e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80044e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80044e8:	4642      	mov	r2, r8
 80044ea:	464b      	mov	r3, r9
 80044ec:	1891      	adds	r1, r2, r2
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	415b      	adcs	r3, r3
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044f8:	4641      	mov	r1, r8
 80044fa:	1851      	adds	r1, r2, r1
 80044fc:	6039      	str	r1, [r7, #0]
 80044fe:	4649      	mov	r1, r9
 8004500:	414b      	adcs	r3, r1
 8004502:	607b      	str	r3, [r7, #4]
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004510:	4659      	mov	r1, fp
 8004512:	00cb      	lsls	r3, r1, #3
 8004514:	4651      	mov	r1, sl
 8004516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800451a:	4651      	mov	r1, sl
 800451c:	00ca      	lsls	r2, r1, #3
 800451e:	4610      	mov	r0, r2
 8004520:	4619      	mov	r1, r3
 8004522:	4603      	mov	r3, r0
 8004524:	4642      	mov	r2, r8
 8004526:	189b      	adds	r3, r3, r2
 8004528:	66bb      	str	r3, [r7, #104]	@ 0x68
 800452a:	464b      	mov	r3, r9
 800452c:	460a      	mov	r2, r1
 800452e:	eb42 0303 	adc.w	r3, r2, r3
 8004532:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	663b      	str	r3, [r7, #96]	@ 0x60
 800453e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004540:	f04f 0200 	mov.w	r2, #0
 8004544:	f04f 0300 	mov.w	r3, #0
 8004548:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800454c:	4649      	mov	r1, r9
 800454e:	008b      	lsls	r3, r1, #2
 8004550:	4641      	mov	r1, r8
 8004552:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004556:	4641      	mov	r1, r8
 8004558:	008a      	lsls	r2, r1, #2
 800455a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800455e:	f7fc fb47 	bl	8000bf0 <__aeabi_uldivmod>
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	4b0d      	ldr	r3, [pc, #52]	@ (800459c <UART_SetConfig+0x4e4>)
 8004568:	fba3 1302 	umull	r1, r3, r3, r2
 800456c:	095b      	lsrs	r3, r3, #5
 800456e:	2164      	movs	r1, #100	@ 0x64
 8004570:	fb01 f303 	mul.w	r3, r1, r3
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	3332      	adds	r3, #50	@ 0x32
 800457a:	4a08      	ldr	r2, [pc, #32]	@ (800459c <UART_SetConfig+0x4e4>)
 800457c:	fba2 2303 	umull	r2, r3, r2, r3
 8004580:	095b      	lsrs	r3, r3, #5
 8004582:	f003 020f 	and.w	r2, r3, #15
 8004586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4422      	add	r2, r4
 800458e:	609a      	str	r2, [r3, #8]
}
 8004590:	bf00      	nop
 8004592:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004596:	46bd      	mov	sp, r7
 8004598:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800459c:	51eb851f 	.word	0x51eb851f

080045a0 <memset>:
 80045a0:	4402      	add	r2, r0
 80045a2:	4603      	mov	r3, r0
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d100      	bne.n	80045aa <memset+0xa>
 80045a8:	4770      	bx	lr
 80045aa:	f803 1b01 	strb.w	r1, [r3], #1
 80045ae:	e7f9      	b.n	80045a4 <memset+0x4>

080045b0 <__errno>:
 80045b0:	4b01      	ldr	r3, [pc, #4]	@ (80045b8 <__errno+0x8>)
 80045b2:	6818      	ldr	r0, [r3, #0]
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20000010 	.word	0x20000010

080045bc <__libc_init_array>:
 80045bc:	b570      	push	{r4, r5, r6, lr}
 80045be:	4d0d      	ldr	r5, [pc, #52]	@ (80045f4 <__libc_init_array+0x38>)
 80045c0:	4c0d      	ldr	r4, [pc, #52]	@ (80045f8 <__libc_init_array+0x3c>)
 80045c2:	1b64      	subs	r4, r4, r5
 80045c4:	10a4      	asrs	r4, r4, #2
 80045c6:	2600      	movs	r6, #0
 80045c8:	42a6      	cmp	r6, r4
 80045ca:	d109      	bne.n	80045e0 <__libc_init_array+0x24>
 80045cc:	4d0b      	ldr	r5, [pc, #44]	@ (80045fc <__libc_init_array+0x40>)
 80045ce:	4c0c      	ldr	r4, [pc, #48]	@ (8004600 <__libc_init_array+0x44>)
 80045d0:	f000 ff78 	bl	80054c4 <_init>
 80045d4:	1b64      	subs	r4, r4, r5
 80045d6:	10a4      	asrs	r4, r4, #2
 80045d8:	2600      	movs	r6, #0
 80045da:	42a6      	cmp	r6, r4
 80045dc:	d105      	bne.n	80045ea <__libc_init_array+0x2e>
 80045de:	bd70      	pop	{r4, r5, r6, pc}
 80045e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045e4:	4798      	blx	r3
 80045e6:	3601      	adds	r6, #1
 80045e8:	e7ee      	b.n	80045c8 <__libc_init_array+0xc>
 80045ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ee:	4798      	blx	r3
 80045f0:	3601      	adds	r6, #1
 80045f2:	e7f2      	b.n	80045da <__libc_init_array+0x1e>
 80045f4:	08005530 	.word	0x08005530
 80045f8:	08005530 	.word	0x08005530
 80045fc:	08005530 	.word	0x08005530
 8004600:	08005534 	.word	0x08005534

08004604 <pow>:
 8004604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004606:	ed2d 8b02 	vpush	{d8}
 800460a:	eeb0 8a40 	vmov.f32	s16, s0
 800460e:	eef0 8a60 	vmov.f32	s17, s1
 8004612:	ec55 4b11 	vmov	r4, r5, d1
 8004616:	f000 f873 	bl	8004700 <__ieee754_pow>
 800461a:	4622      	mov	r2, r4
 800461c:	462b      	mov	r3, r5
 800461e:	4620      	mov	r0, r4
 8004620:	4629      	mov	r1, r5
 8004622:	ec57 6b10 	vmov	r6, r7, d0
 8004626:	f7fc fa2d 	bl	8000a84 <__aeabi_dcmpun>
 800462a:	2800      	cmp	r0, #0
 800462c:	d13b      	bne.n	80046a6 <pow+0xa2>
 800462e:	ec51 0b18 	vmov	r0, r1, d8
 8004632:	2200      	movs	r2, #0
 8004634:	2300      	movs	r3, #0
 8004636:	f7fc f9f3 	bl	8000a20 <__aeabi_dcmpeq>
 800463a:	b1b8      	cbz	r0, 800466c <pow+0x68>
 800463c:	2200      	movs	r2, #0
 800463e:	2300      	movs	r3, #0
 8004640:	4620      	mov	r0, r4
 8004642:	4629      	mov	r1, r5
 8004644:	f7fc f9ec 	bl	8000a20 <__aeabi_dcmpeq>
 8004648:	2800      	cmp	r0, #0
 800464a:	d146      	bne.n	80046da <pow+0xd6>
 800464c:	ec45 4b10 	vmov	d0, r4, r5
 8004650:	f000 f848 	bl	80046e4 <finite>
 8004654:	b338      	cbz	r0, 80046a6 <pow+0xa2>
 8004656:	2200      	movs	r2, #0
 8004658:	2300      	movs	r3, #0
 800465a:	4620      	mov	r0, r4
 800465c:	4629      	mov	r1, r5
 800465e:	f7fc f9e9 	bl	8000a34 <__aeabi_dcmplt>
 8004662:	b300      	cbz	r0, 80046a6 <pow+0xa2>
 8004664:	f7ff ffa4 	bl	80045b0 <__errno>
 8004668:	2322      	movs	r3, #34	@ 0x22
 800466a:	e01b      	b.n	80046a4 <pow+0xa0>
 800466c:	ec47 6b10 	vmov	d0, r6, r7
 8004670:	f000 f838 	bl	80046e4 <finite>
 8004674:	b9e0      	cbnz	r0, 80046b0 <pow+0xac>
 8004676:	eeb0 0a48 	vmov.f32	s0, s16
 800467a:	eef0 0a68 	vmov.f32	s1, s17
 800467e:	f000 f831 	bl	80046e4 <finite>
 8004682:	b1a8      	cbz	r0, 80046b0 <pow+0xac>
 8004684:	ec45 4b10 	vmov	d0, r4, r5
 8004688:	f000 f82c 	bl	80046e4 <finite>
 800468c:	b180      	cbz	r0, 80046b0 <pow+0xac>
 800468e:	4632      	mov	r2, r6
 8004690:	463b      	mov	r3, r7
 8004692:	4630      	mov	r0, r6
 8004694:	4639      	mov	r1, r7
 8004696:	f7fc f9f5 	bl	8000a84 <__aeabi_dcmpun>
 800469a:	2800      	cmp	r0, #0
 800469c:	d0e2      	beq.n	8004664 <pow+0x60>
 800469e:	f7ff ff87 	bl	80045b0 <__errno>
 80046a2:	2321      	movs	r3, #33	@ 0x21
 80046a4:	6003      	str	r3, [r0, #0]
 80046a6:	ecbd 8b02 	vpop	{d8}
 80046aa:	ec47 6b10 	vmov	d0, r6, r7
 80046ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046b0:	2200      	movs	r2, #0
 80046b2:	2300      	movs	r3, #0
 80046b4:	4630      	mov	r0, r6
 80046b6:	4639      	mov	r1, r7
 80046b8:	f7fc f9b2 	bl	8000a20 <__aeabi_dcmpeq>
 80046bc:	2800      	cmp	r0, #0
 80046be:	d0f2      	beq.n	80046a6 <pow+0xa2>
 80046c0:	eeb0 0a48 	vmov.f32	s0, s16
 80046c4:	eef0 0a68 	vmov.f32	s1, s17
 80046c8:	f000 f80c 	bl	80046e4 <finite>
 80046cc:	2800      	cmp	r0, #0
 80046ce:	d0ea      	beq.n	80046a6 <pow+0xa2>
 80046d0:	ec45 4b10 	vmov	d0, r4, r5
 80046d4:	f000 f806 	bl	80046e4 <finite>
 80046d8:	e7c3      	b.n	8004662 <pow+0x5e>
 80046da:	4f01      	ldr	r7, [pc, #4]	@ (80046e0 <pow+0xdc>)
 80046dc:	2600      	movs	r6, #0
 80046de:	e7e2      	b.n	80046a6 <pow+0xa2>
 80046e0:	3ff00000 	.word	0x3ff00000

080046e4 <finite>:
 80046e4:	b082      	sub	sp, #8
 80046e6:	ed8d 0b00 	vstr	d0, [sp]
 80046ea:	9801      	ldr	r0, [sp, #4]
 80046ec:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80046f0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80046f4:	0fc0      	lsrs	r0, r0, #31
 80046f6:	b002      	add	sp, #8
 80046f8:	4770      	bx	lr
 80046fa:	0000      	movs	r0, r0
 80046fc:	0000      	movs	r0, r0
	...

08004700 <__ieee754_pow>:
 8004700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004704:	b091      	sub	sp, #68	@ 0x44
 8004706:	ed8d 1b00 	vstr	d1, [sp]
 800470a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800470e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8004712:	ea5a 0001 	orrs.w	r0, sl, r1
 8004716:	ec57 6b10 	vmov	r6, r7, d0
 800471a:	d113      	bne.n	8004744 <__ieee754_pow+0x44>
 800471c:	19b3      	adds	r3, r6, r6
 800471e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8004722:	4152      	adcs	r2, r2
 8004724:	4298      	cmp	r0, r3
 8004726:	4b98      	ldr	r3, [pc, #608]	@ (8004988 <__ieee754_pow+0x288>)
 8004728:	4193      	sbcs	r3, r2
 800472a:	f080 84ea 	bcs.w	8005102 <__ieee754_pow+0xa02>
 800472e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004732:	4630      	mov	r0, r6
 8004734:	4639      	mov	r1, r7
 8004736:	f7fb fd55 	bl	80001e4 <__adddf3>
 800473a:	ec41 0b10 	vmov	d0, r0, r1
 800473e:	b011      	add	sp, #68	@ 0x44
 8004740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004744:	4a91      	ldr	r2, [pc, #580]	@ (800498c <__ieee754_pow+0x28c>)
 8004746:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800474a:	4590      	cmp	r8, r2
 800474c:	463d      	mov	r5, r7
 800474e:	4633      	mov	r3, r6
 8004750:	d806      	bhi.n	8004760 <__ieee754_pow+0x60>
 8004752:	d101      	bne.n	8004758 <__ieee754_pow+0x58>
 8004754:	2e00      	cmp	r6, #0
 8004756:	d1ea      	bne.n	800472e <__ieee754_pow+0x2e>
 8004758:	4592      	cmp	sl, r2
 800475a:	d801      	bhi.n	8004760 <__ieee754_pow+0x60>
 800475c:	d10e      	bne.n	800477c <__ieee754_pow+0x7c>
 800475e:	b169      	cbz	r1, 800477c <__ieee754_pow+0x7c>
 8004760:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8004764:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8004768:	431d      	orrs	r5, r3
 800476a:	d1e0      	bne.n	800472e <__ieee754_pow+0x2e>
 800476c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004770:	18db      	adds	r3, r3, r3
 8004772:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8004776:	4152      	adcs	r2, r2
 8004778:	429d      	cmp	r5, r3
 800477a:	e7d4      	b.n	8004726 <__ieee754_pow+0x26>
 800477c:	2d00      	cmp	r5, #0
 800477e:	46c3      	mov	fp, r8
 8004780:	da3a      	bge.n	80047f8 <__ieee754_pow+0xf8>
 8004782:	4a83      	ldr	r2, [pc, #524]	@ (8004990 <__ieee754_pow+0x290>)
 8004784:	4592      	cmp	sl, r2
 8004786:	d84d      	bhi.n	8004824 <__ieee754_pow+0x124>
 8004788:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800478c:	4592      	cmp	sl, r2
 800478e:	f240 84c7 	bls.w	8005120 <__ieee754_pow+0xa20>
 8004792:	ea4f 522a 	mov.w	r2, sl, asr #20
 8004796:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800479a:	2a14      	cmp	r2, #20
 800479c:	dd0f      	ble.n	80047be <__ieee754_pow+0xbe>
 800479e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80047a2:	fa21 f402 	lsr.w	r4, r1, r2
 80047a6:	fa04 f202 	lsl.w	r2, r4, r2
 80047aa:	428a      	cmp	r2, r1
 80047ac:	f040 84b8 	bne.w	8005120 <__ieee754_pow+0xa20>
 80047b0:	f004 0401 	and.w	r4, r4, #1
 80047b4:	f1c4 0402 	rsb	r4, r4, #2
 80047b8:	2900      	cmp	r1, #0
 80047ba:	d158      	bne.n	800486e <__ieee754_pow+0x16e>
 80047bc:	e00e      	b.n	80047dc <__ieee754_pow+0xdc>
 80047be:	2900      	cmp	r1, #0
 80047c0:	d154      	bne.n	800486c <__ieee754_pow+0x16c>
 80047c2:	f1c2 0214 	rsb	r2, r2, #20
 80047c6:	fa4a f402 	asr.w	r4, sl, r2
 80047ca:	fa04 f202 	lsl.w	r2, r4, r2
 80047ce:	4552      	cmp	r2, sl
 80047d0:	f040 84a3 	bne.w	800511a <__ieee754_pow+0xa1a>
 80047d4:	f004 0401 	and.w	r4, r4, #1
 80047d8:	f1c4 0402 	rsb	r4, r4, #2
 80047dc:	4a6d      	ldr	r2, [pc, #436]	@ (8004994 <__ieee754_pow+0x294>)
 80047de:	4592      	cmp	sl, r2
 80047e0:	d12e      	bne.n	8004840 <__ieee754_pow+0x140>
 80047e2:	f1b9 0f00 	cmp.w	r9, #0
 80047e6:	f280 8494 	bge.w	8005112 <__ieee754_pow+0xa12>
 80047ea:	496a      	ldr	r1, [pc, #424]	@ (8004994 <__ieee754_pow+0x294>)
 80047ec:	4632      	mov	r2, r6
 80047ee:	463b      	mov	r3, r7
 80047f0:	2000      	movs	r0, #0
 80047f2:	f7fb ffd7 	bl	80007a4 <__aeabi_ddiv>
 80047f6:	e7a0      	b.n	800473a <__ieee754_pow+0x3a>
 80047f8:	2400      	movs	r4, #0
 80047fa:	bbc1      	cbnz	r1, 800486e <__ieee754_pow+0x16e>
 80047fc:	4a63      	ldr	r2, [pc, #396]	@ (800498c <__ieee754_pow+0x28c>)
 80047fe:	4592      	cmp	sl, r2
 8004800:	d1ec      	bne.n	80047dc <__ieee754_pow+0xdc>
 8004802:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8004806:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800480a:	431a      	orrs	r2, r3
 800480c:	f000 8479 	beq.w	8005102 <__ieee754_pow+0xa02>
 8004810:	4b61      	ldr	r3, [pc, #388]	@ (8004998 <__ieee754_pow+0x298>)
 8004812:	4598      	cmp	r8, r3
 8004814:	d908      	bls.n	8004828 <__ieee754_pow+0x128>
 8004816:	f1b9 0f00 	cmp.w	r9, #0
 800481a:	f2c0 8476 	blt.w	800510a <__ieee754_pow+0xa0a>
 800481e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004822:	e78a      	b.n	800473a <__ieee754_pow+0x3a>
 8004824:	2402      	movs	r4, #2
 8004826:	e7e8      	b.n	80047fa <__ieee754_pow+0xfa>
 8004828:	f1b9 0f00 	cmp.w	r9, #0
 800482c:	f04f 0000 	mov.w	r0, #0
 8004830:	f04f 0100 	mov.w	r1, #0
 8004834:	da81      	bge.n	800473a <__ieee754_pow+0x3a>
 8004836:	e9dd 0300 	ldrd	r0, r3, [sp]
 800483a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800483e:	e77c      	b.n	800473a <__ieee754_pow+0x3a>
 8004840:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8004844:	d106      	bne.n	8004854 <__ieee754_pow+0x154>
 8004846:	4632      	mov	r2, r6
 8004848:	463b      	mov	r3, r7
 800484a:	4630      	mov	r0, r6
 800484c:	4639      	mov	r1, r7
 800484e:	f7fb fe7f 	bl	8000550 <__aeabi_dmul>
 8004852:	e772      	b.n	800473a <__ieee754_pow+0x3a>
 8004854:	4a51      	ldr	r2, [pc, #324]	@ (800499c <__ieee754_pow+0x29c>)
 8004856:	4591      	cmp	r9, r2
 8004858:	d109      	bne.n	800486e <__ieee754_pow+0x16e>
 800485a:	2d00      	cmp	r5, #0
 800485c:	db07      	blt.n	800486e <__ieee754_pow+0x16e>
 800485e:	ec47 6b10 	vmov	d0, r6, r7
 8004862:	b011      	add	sp, #68	@ 0x44
 8004864:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004868:	f000 bd52 	b.w	8005310 <__ieee754_sqrt>
 800486c:	2400      	movs	r4, #0
 800486e:	ec47 6b10 	vmov	d0, r6, r7
 8004872:	9302      	str	r3, [sp, #8]
 8004874:	f000 fc88 	bl	8005188 <fabs>
 8004878:	9b02      	ldr	r3, [sp, #8]
 800487a:	ec51 0b10 	vmov	r0, r1, d0
 800487e:	bb53      	cbnz	r3, 80048d6 <__ieee754_pow+0x1d6>
 8004880:	4b44      	ldr	r3, [pc, #272]	@ (8004994 <__ieee754_pow+0x294>)
 8004882:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8004886:	429a      	cmp	r2, r3
 8004888:	d002      	beq.n	8004890 <__ieee754_pow+0x190>
 800488a:	f1b8 0f00 	cmp.w	r8, #0
 800488e:	d122      	bne.n	80048d6 <__ieee754_pow+0x1d6>
 8004890:	f1b9 0f00 	cmp.w	r9, #0
 8004894:	da05      	bge.n	80048a2 <__ieee754_pow+0x1a2>
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
 800489a:	2000      	movs	r0, #0
 800489c:	493d      	ldr	r1, [pc, #244]	@ (8004994 <__ieee754_pow+0x294>)
 800489e:	f7fb ff81 	bl	80007a4 <__aeabi_ddiv>
 80048a2:	2d00      	cmp	r5, #0
 80048a4:	f6bf af49 	bge.w	800473a <__ieee754_pow+0x3a>
 80048a8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80048ac:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80048b0:	ea58 0804 	orrs.w	r8, r8, r4
 80048b4:	d108      	bne.n	80048c8 <__ieee754_pow+0x1c8>
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	4610      	mov	r0, r2
 80048bc:	4619      	mov	r1, r3
 80048be:	f7fb fc8f 	bl	80001e0 <__aeabi_dsub>
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	e794      	b.n	80047f2 <__ieee754_pow+0xf2>
 80048c8:	2c01      	cmp	r4, #1
 80048ca:	f47f af36 	bne.w	800473a <__ieee754_pow+0x3a>
 80048ce:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80048d2:	4619      	mov	r1, r3
 80048d4:	e731      	b.n	800473a <__ieee754_pow+0x3a>
 80048d6:	0feb      	lsrs	r3, r5, #31
 80048d8:	3b01      	subs	r3, #1
 80048da:	ea53 0204 	orrs.w	r2, r3, r4
 80048de:	d102      	bne.n	80048e6 <__ieee754_pow+0x1e6>
 80048e0:	4632      	mov	r2, r6
 80048e2:	463b      	mov	r3, r7
 80048e4:	e7e9      	b.n	80048ba <__ieee754_pow+0x1ba>
 80048e6:	3c01      	subs	r4, #1
 80048e8:	431c      	orrs	r4, r3
 80048ea:	d016      	beq.n	800491a <__ieee754_pow+0x21a>
 80048ec:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8004978 <__ieee754_pow+0x278>
 80048f0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80048f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80048f8:	f240 8112 	bls.w	8004b20 <__ieee754_pow+0x420>
 80048fc:	4b28      	ldr	r3, [pc, #160]	@ (80049a0 <__ieee754_pow+0x2a0>)
 80048fe:	459a      	cmp	sl, r3
 8004900:	4b25      	ldr	r3, [pc, #148]	@ (8004998 <__ieee754_pow+0x298>)
 8004902:	d916      	bls.n	8004932 <__ieee754_pow+0x232>
 8004904:	4598      	cmp	r8, r3
 8004906:	d80b      	bhi.n	8004920 <__ieee754_pow+0x220>
 8004908:	f1b9 0f00 	cmp.w	r9, #0
 800490c:	da0b      	bge.n	8004926 <__ieee754_pow+0x226>
 800490e:	2000      	movs	r0, #0
 8004910:	b011      	add	sp, #68	@ 0x44
 8004912:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004916:	f000 bcf3 	b.w	8005300 <__math_oflow>
 800491a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8004980 <__ieee754_pow+0x280>
 800491e:	e7e7      	b.n	80048f0 <__ieee754_pow+0x1f0>
 8004920:	f1b9 0f00 	cmp.w	r9, #0
 8004924:	dcf3      	bgt.n	800490e <__ieee754_pow+0x20e>
 8004926:	2000      	movs	r0, #0
 8004928:	b011      	add	sp, #68	@ 0x44
 800492a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800492e:	f000 bcdf 	b.w	80052f0 <__math_uflow>
 8004932:	4598      	cmp	r8, r3
 8004934:	d20c      	bcs.n	8004950 <__ieee754_pow+0x250>
 8004936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800493a:	2200      	movs	r2, #0
 800493c:	2300      	movs	r3, #0
 800493e:	f7fc f879 	bl	8000a34 <__aeabi_dcmplt>
 8004942:	3800      	subs	r0, #0
 8004944:	bf18      	it	ne
 8004946:	2001      	movne	r0, #1
 8004948:	f1b9 0f00 	cmp.w	r9, #0
 800494c:	daec      	bge.n	8004928 <__ieee754_pow+0x228>
 800494e:	e7df      	b.n	8004910 <__ieee754_pow+0x210>
 8004950:	4b10      	ldr	r3, [pc, #64]	@ (8004994 <__ieee754_pow+0x294>)
 8004952:	4598      	cmp	r8, r3
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	d924      	bls.n	80049a4 <__ieee754_pow+0x2a4>
 800495a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800495e:	2300      	movs	r3, #0
 8004960:	f7fc f868 	bl	8000a34 <__aeabi_dcmplt>
 8004964:	3800      	subs	r0, #0
 8004966:	bf18      	it	ne
 8004968:	2001      	movne	r0, #1
 800496a:	f1b9 0f00 	cmp.w	r9, #0
 800496e:	dccf      	bgt.n	8004910 <__ieee754_pow+0x210>
 8004970:	e7da      	b.n	8004928 <__ieee754_pow+0x228>
 8004972:	bf00      	nop
 8004974:	f3af 8000 	nop.w
 8004978:	00000000 	.word	0x00000000
 800497c:	3ff00000 	.word	0x3ff00000
 8004980:	00000000 	.word	0x00000000
 8004984:	bff00000 	.word	0xbff00000
 8004988:	fff00000 	.word	0xfff00000
 800498c:	7ff00000 	.word	0x7ff00000
 8004990:	433fffff 	.word	0x433fffff
 8004994:	3ff00000 	.word	0x3ff00000
 8004998:	3fefffff 	.word	0x3fefffff
 800499c:	3fe00000 	.word	0x3fe00000
 80049a0:	43f00000 	.word	0x43f00000
 80049a4:	4b5a      	ldr	r3, [pc, #360]	@ (8004b10 <__ieee754_pow+0x410>)
 80049a6:	f7fb fc1b 	bl	80001e0 <__aeabi_dsub>
 80049aa:	a351      	add	r3, pc, #324	@ (adr r3, 8004af0 <__ieee754_pow+0x3f0>)
 80049ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b0:	4604      	mov	r4, r0
 80049b2:	460d      	mov	r5, r1
 80049b4:	f7fb fdcc 	bl	8000550 <__aeabi_dmul>
 80049b8:	a34f      	add	r3, pc, #316	@ (adr r3, 8004af8 <__ieee754_pow+0x3f8>)
 80049ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049be:	4606      	mov	r6, r0
 80049c0:	460f      	mov	r7, r1
 80049c2:	4620      	mov	r0, r4
 80049c4:	4629      	mov	r1, r5
 80049c6:	f7fb fdc3 	bl	8000550 <__aeabi_dmul>
 80049ca:	4b52      	ldr	r3, [pc, #328]	@ (8004b14 <__ieee754_pow+0x414>)
 80049cc:	4682      	mov	sl, r0
 80049ce:	468b      	mov	fp, r1
 80049d0:	2200      	movs	r2, #0
 80049d2:	4620      	mov	r0, r4
 80049d4:	4629      	mov	r1, r5
 80049d6:	f7fb fdbb 	bl	8000550 <__aeabi_dmul>
 80049da:	4602      	mov	r2, r0
 80049dc:	460b      	mov	r3, r1
 80049de:	a148      	add	r1, pc, #288	@ (adr r1, 8004b00 <__ieee754_pow+0x400>)
 80049e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049e4:	f7fb fbfc 	bl	80001e0 <__aeabi_dsub>
 80049e8:	4622      	mov	r2, r4
 80049ea:	462b      	mov	r3, r5
 80049ec:	f7fb fdb0 	bl	8000550 <__aeabi_dmul>
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	2000      	movs	r0, #0
 80049f6:	4948      	ldr	r1, [pc, #288]	@ (8004b18 <__ieee754_pow+0x418>)
 80049f8:	f7fb fbf2 	bl	80001e0 <__aeabi_dsub>
 80049fc:	4622      	mov	r2, r4
 80049fe:	4680      	mov	r8, r0
 8004a00:	4689      	mov	r9, r1
 8004a02:	462b      	mov	r3, r5
 8004a04:	4620      	mov	r0, r4
 8004a06:	4629      	mov	r1, r5
 8004a08:	f7fb fda2 	bl	8000550 <__aeabi_dmul>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4640      	mov	r0, r8
 8004a12:	4649      	mov	r1, r9
 8004a14:	f7fb fd9c 	bl	8000550 <__aeabi_dmul>
 8004a18:	a33b      	add	r3, pc, #236	@ (adr r3, 8004b08 <__ieee754_pow+0x408>)
 8004a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1e:	f7fb fd97 	bl	8000550 <__aeabi_dmul>
 8004a22:	4602      	mov	r2, r0
 8004a24:	460b      	mov	r3, r1
 8004a26:	4650      	mov	r0, sl
 8004a28:	4659      	mov	r1, fp
 8004a2a:	f7fb fbd9 	bl	80001e0 <__aeabi_dsub>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	460b      	mov	r3, r1
 8004a32:	4680      	mov	r8, r0
 8004a34:	4689      	mov	r9, r1
 8004a36:	4630      	mov	r0, r6
 8004a38:	4639      	mov	r1, r7
 8004a3a:	f7fb fbd3 	bl	80001e4 <__adddf3>
 8004a3e:	2400      	movs	r4, #0
 8004a40:	4632      	mov	r2, r6
 8004a42:	463b      	mov	r3, r7
 8004a44:	4620      	mov	r0, r4
 8004a46:	460d      	mov	r5, r1
 8004a48:	f7fb fbca 	bl	80001e0 <__aeabi_dsub>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4640      	mov	r0, r8
 8004a52:	4649      	mov	r1, r9
 8004a54:	f7fb fbc4 	bl	80001e0 <__aeabi_dsub>
 8004a58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a60:	2300      	movs	r3, #0
 8004a62:	9304      	str	r3, [sp, #16]
 8004a64:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8004a68:	4606      	mov	r6, r0
 8004a6a:	460f      	mov	r7, r1
 8004a6c:	4652      	mov	r2, sl
 8004a6e:	465b      	mov	r3, fp
 8004a70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a74:	f7fb fbb4 	bl	80001e0 <__aeabi_dsub>
 8004a78:	4622      	mov	r2, r4
 8004a7a:	462b      	mov	r3, r5
 8004a7c:	f7fb fd68 	bl	8000550 <__aeabi_dmul>
 8004a80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a84:	4680      	mov	r8, r0
 8004a86:	4689      	mov	r9, r1
 8004a88:	4630      	mov	r0, r6
 8004a8a:	4639      	mov	r1, r7
 8004a8c:	f7fb fd60 	bl	8000550 <__aeabi_dmul>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4640      	mov	r0, r8
 8004a96:	4649      	mov	r1, r9
 8004a98:	f7fb fba4 	bl	80001e4 <__adddf3>
 8004a9c:	4652      	mov	r2, sl
 8004a9e:	465b      	mov	r3, fp
 8004aa0:	4606      	mov	r6, r0
 8004aa2:	460f      	mov	r7, r1
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	4629      	mov	r1, r5
 8004aa8:	f7fb fd52 	bl	8000550 <__aeabi_dmul>
 8004aac:	460b      	mov	r3, r1
 8004aae:	4602      	mov	r2, r0
 8004ab0:	4680      	mov	r8, r0
 8004ab2:	4689      	mov	r9, r1
 8004ab4:	4630      	mov	r0, r6
 8004ab6:	4639      	mov	r1, r7
 8004ab8:	f7fb fb94 	bl	80001e4 <__adddf3>
 8004abc:	4b17      	ldr	r3, [pc, #92]	@ (8004b1c <__ieee754_pow+0x41c>)
 8004abe:	4299      	cmp	r1, r3
 8004ac0:	4604      	mov	r4, r0
 8004ac2:	460d      	mov	r5, r1
 8004ac4:	468a      	mov	sl, r1
 8004ac6:	468b      	mov	fp, r1
 8004ac8:	f340 82ef 	ble.w	80050aa <__ieee754_pow+0x9aa>
 8004acc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8004ad0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8004ad4:	4303      	orrs	r3, r0
 8004ad6:	f000 81e8 	beq.w	8004eaa <__ieee754_pow+0x7aa>
 8004ada:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	f7fb ffa7 	bl	8000a34 <__aeabi_dcmplt>
 8004ae6:	3800      	subs	r0, #0
 8004ae8:	bf18      	it	ne
 8004aea:	2001      	movne	r0, #1
 8004aec:	e710      	b.n	8004910 <__ieee754_pow+0x210>
 8004aee:	bf00      	nop
 8004af0:	60000000 	.word	0x60000000
 8004af4:	3ff71547 	.word	0x3ff71547
 8004af8:	f85ddf44 	.word	0xf85ddf44
 8004afc:	3e54ae0b 	.word	0x3e54ae0b
 8004b00:	55555555 	.word	0x55555555
 8004b04:	3fd55555 	.word	0x3fd55555
 8004b08:	652b82fe 	.word	0x652b82fe
 8004b0c:	3ff71547 	.word	0x3ff71547
 8004b10:	3ff00000 	.word	0x3ff00000
 8004b14:	3fd00000 	.word	0x3fd00000
 8004b18:	3fe00000 	.word	0x3fe00000
 8004b1c:	408fffff 	.word	0x408fffff
 8004b20:	4bd5      	ldr	r3, [pc, #852]	@ (8004e78 <__ieee754_pow+0x778>)
 8004b22:	402b      	ands	r3, r5
 8004b24:	2200      	movs	r2, #0
 8004b26:	b92b      	cbnz	r3, 8004b34 <__ieee754_pow+0x434>
 8004b28:	4bd4      	ldr	r3, [pc, #848]	@ (8004e7c <__ieee754_pow+0x77c>)
 8004b2a:	f7fb fd11 	bl	8000550 <__aeabi_dmul>
 8004b2e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8004b32:	468b      	mov	fp, r1
 8004b34:	ea4f 532b 	mov.w	r3, fp, asr #20
 8004b38:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8004b3c:	4413      	add	r3, r2
 8004b3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b40:	4bcf      	ldr	r3, [pc, #828]	@ (8004e80 <__ieee754_pow+0x780>)
 8004b42:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8004b46:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8004b4a:	459b      	cmp	fp, r3
 8004b4c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8004b50:	dd08      	ble.n	8004b64 <__ieee754_pow+0x464>
 8004b52:	4bcc      	ldr	r3, [pc, #816]	@ (8004e84 <__ieee754_pow+0x784>)
 8004b54:	459b      	cmp	fp, r3
 8004b56:	f340 81a5 	ble.w	8004ea4 <__ieee754_pow+0x7a4>
 8004b5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b60:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8004b64:	f04f 0a00 	mov.w	sl, #0
 8004b68:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8004b6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b6e:	4bc6      	ldr	r3, [pc, #792]	@ (8004e88 <__ieee754_pow+0x788>)
 8004b70:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004b74:	ed93 7b00 	vldr	d7, [r3]
 8004b78:	4629      	mov	r1, r5
 8004b7a:	ec53 2b17 	vmov	r2, r3, d7
 8004b7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004b82:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004b86:	f7fb fb2b 	bl	80001e0 <__aeabi_dsub>
 8004b8a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004b8e:	4606      	mov	r6, r0
 8004b90:	460f      	mov	r7, r1
 8004b92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b96:	f7fb fb25 	bl	80001e4 <__adddf3>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	2000      	movs	r0, #0
 8004ba0:	49ba      	ldr	r1, [pc, #744]	@ (8004e8c <__ieee754_pow+0x78c>)
 8004ba2:	f7fb fdff 	bl	80007a4 <__aeabi_ddiv>
 8004ba6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	4630      	mov	r0, r6
 8004bb0:	4639      	mov	r1, r7
 8004bb2:	f7fb fccd 	bl	8000550 <__aeabi_dmul>
 8004bb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bba:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8004bbe:	106d      	asrs	r5, r5, #1
 8004bc0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8004bc4:	f04f 0b00 	mov.w	fp, #0
 8004bc8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8004bcc:	4661      	mov	r1, ip
 8004bce:	2200      	movs	r2, #0
 8004bd0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8004bd4:	4658      	mov	r0, fp
 8004bd6:	46e1      	mov	r9, ip
 8004bd8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8004bdc:	4614      	mov	r4, r2
 8004bde:	461d      	mov	r5, r3
 8004be0:	f7fb fcb6 	bl	8000550 <__aeabi_dmul>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	4630      	mov	r0, r6
 8004bea:	4639      	mov	r1, r7
 8004bec:	f7fb faf8 	bl	80001e0 <__aeabi_dsub>
 8004bf0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004bf4:	4606      	mov	r6, r0
 8004bf6:	460f      	mov	r7, r1
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	4629      	mov	r1, r5
 8004bfc:	f7fb faf0 	bl	80001e0 <__aeabi_dsub>
 8004c00:	4602      	mov	r2, r0
 8004c02:	460b      	mov	r3, r1
 8004c04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004c08:	f7fb faea 	bl	80001e0 <__aeabi_dsub>
 8004c0c:	465a      	mov	r2, fp
 8004c0e:	464b      	mov	r3, r9
 8004c10:	f7fb fc9e 	bl	8000550 <__aeabi_dmul>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4630      	mov	r0, r6
 8004c1a:	4639      	mov	r1, r7
 8004c1c:	f7fb fae0 	bl	80001e0 <__aeabi_dsub>
 8004c20:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004c24:	f7fb fc94 	bl	8000550 <__aeabi_dmul>
 8004c28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004c30:	4610      	mov	r0, r2
 8004c32:	4619      	mov	r1, r3
 8004c34:	f7fb fc8c 	bl	8000550 <__aeabi_dmul>
 8004c38:	a37d      	add	r3, pc, #500	@ (adr r3, 8004e30 <__ieee754_pow+0x730>)
 8004c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3e:	4604      	mov	r4, r0
 8004c40:	460d      	mov	r5, r1
 8004c42:	f7fb fc85 	bl	8000550 <__aeabi_dmul>
 8004c46:	a37c      	add	r3, pc, #496	@ (adr r3, 8004e38 <__ieee754_pow+0x738>)
 8004c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4c:	f7fb faca 	bl	80001e4 <__adddf3>
 8004c50:	4622      	mov	r2, r4
 8004c52:	462b      	mov	r3, r5
 8004c54:	f7fb fc7c 	bl	8000550 <__aeabi_dmul>
 8004c58:	a379      	add	r3, pc, #484	@ (adr r3, 8004e40 <__ieee754_pow+0x740>)
 8004c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5e:	f7fb fac1 	bl	80001e4 <__adddf3>
 8004c62:	4622      	mov	r2, r4
 8004c64:	462b      	mov	r3, r5
 8004c66:	f7fb fc73 	bl	8000550 <__aeabi_dmul>
 8004c6a:	a377      	add	r3, pc, #476	@ (adr r3, 8004e48 <__ieee754_pow+0x748>)
 8004c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c70:	f7fb fab8 	bl	80001e4 <__adddf3>
 8004c74:	4622      	mov	r2, r4
 8004c76:	462b      	mov	r3, r5
 8004c78:	f7fb fc6a 	bl	8000550 <__aeabi_dmul>
 8004c7c:	a374      	add	r3, pc, #464	@ (adr r3, 8004e50 <__ieee754_pow+0x750>)
 8004c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c82:	f7fb faaf 	bl	80001e4 <__adddf3>
 8004c86:	4622      	mov	r2, r4
 8004c88:	462b      	mov	r3, r5
 8004c8a:	f7fb fc61 	bl	8000550 <__aeabi_dmul>
 8004c8e:	a372      	add	r3, pc, #456	@ (adr r3, 8004e58 <__ieee754_pow+0x758>)
 8004c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c94:	f7fb faa6 	bl	80001e4 <__adddf3>
 8004c98:	4622      	mov	r2, r4
 8004c9a:	4606      	mov	r6, r0
 8004c9c:	460f      	mov	r7, r1
 8004c9e:	462b      	mov	r3, r5
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	4629      	mov	r1, r5
 8004ca4:	f7fb fc54 	bl	8000550 <__aeabi_dmul>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	460b      	mov	r3, r1
 8004cac:	4630      	mov	r0, r6
 8004cae:	4639      	mov	r1, r7
 8004cb0:	f7fb fc4e 	bl	8000550 <__aeabi_dmul>
 8004cb4:	465a      	mov	r2, fp
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	460d      	mov	r5, r1
 8004cba:	464b      	mov	r3, r9
 8004cbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cc0:	f7fb fa90 	bl	80001e4 <__adddf3>
 8004cc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004cc8:	f7fb fc42 	bl	8000550 <__aeabi_dmul>
 8004ccc:	4622      	mov	r2, r4
 8004cce:	462b      	mov	r3, r5
 8004cd0:	f7fb fa88 	bl	80001e4 <__adddf3>
 8004cd4:	465a      	mov	r2, fp
 8004cd6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004cda:	464b      	mov	r3, r9
 8004cdc:	4658      	mov	r0, fp
 8004cde:	4649      	mov	r1, r9
 8004ce0:	f7fb fc36 	bl	8000550 <__aeabi_dmul>
 8004ce4:	4b6a      	ldr	r3, [pc, #424]	@ (8004e90 <__ieee754_pow+0x790>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	4606      	mov	r6, r0
 8004cea:	460f      	mov	r7, r1
 8004cec:	f7fb fa7a 	bl	80001e4 <__adddf3>
 8004cf0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004cf4:	f7fb fa76 	bl	80001e4 <__adddf3>
 8004cf8:	46d8      	mov	r8, fp
 8004cfa:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8004cfe:	460d      	mov	r5, r1
 8004d00:	465a      	mov	r2, fp
 8004d02:	460b      	mov	r3, r1
 8004d04:	4640      	mov	r0, r8
 8004d06:	4649      	mov	r1, r9
 8004d08:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8004d0c:	f7fb fc20 	bl	8000550 <__aeabi_dmul>
 8004d10:	465c      	mov	r4, fp
 8004d12:	4680      	mov	r8, r0
 8004d14:	4689      	mov	r9, r1
 8004d16:	4b5e      	ldr	r3, [pc, #376]	@ (8004e90 <__ieee754_pow+0x790>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	4629      	mov	r1, r5
 8004d1e:	f7fb fa5f 	bl	80001e0 <__aeabi_dsub>
 8004d22:	4632      	mov	r2, r6
 8004d24:	463b      	mov	r3, r7
 8004d26:	f7fb fa5b 	bl	80001e0 <__aeabi_dsub>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004d32:	f7fb fa55 	bl	80001e0 <__aeabi_dsub>
 8004d36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d3a:	f7fb fc09 	bl	8000550 <__aeabi_dmul>
 8004d3e:	4622      	mov	r2, r4
 8004d40:	4606      	mov	r6, r0
 8004d42:	460f      	mov	r7, r1
 8004d44:	462b      	mov	r3, r5
 8004d46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d4a:	f7fb fc01 	bl	8000550 <__aeabi_dmul>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	460b      	mov	r3, r1
 8004d52:	4630      	mov	r0, r6
 8004d54:	4639      	mov	r1, r7
 8004d56:	f7fb fa45 	bl	80001e4 <__adddf3>
 8004d5a:	4606      	mov	r6, r0
 8004d5c:	460f      	mov	r7, r1
 8004d5e:	4602      	mov	r2, r0
 8004d60:	460b      	mov	r3, r1
 8004d62:	4640      	mov	r0, r8
 8004d64:	4649      	mov	r1, r9
 8004d66:	f7fb fa3d 	bl	80001e4 <__adddf3>
 8004d6a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8004d6e:	a33c      	add	r3, pc, #240	@ (adr r3, 8004e60 <__ieee754_pow+0x760>)
 8004d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d74:	4658      	mov	r0, fp
 8004d76:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8004d7a:	460d      	mov	r5, r1
 8004d7c:	f7fb fbe8 	bl	8000550 <__aeabi_dmul>
 8004d80:	465c      	mov	r4, fp
 8004d82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d86:	4642      	mov	r2, r8
 8004d88:	464b      	mov	r3, r9
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	4629      	mov	r1, r5
 8004d8e:	f7fb fa27 	bl	80001e0 <__aeabi_dsub>
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	4630      	mov	r0, r6
 8004d98:	4639      	mov	r1, r7
 8004d9a:	f7fb fa21 	bl	80001e0 <__aeabi_dsub>
 8004d9e:	a332      	add	r3, pc, #200	@ (adr r3, 8004e68 <__ieee754_pow+0x768>)
 8004da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da4:	f7fb fbd4 	bl	8000550 <__aeabi_dmul>
 8004da8:	a331      	add	r3, pc, #196	@ (adr r3, 8004e70 <__ieee754_pow+0x770>)
 8004daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dae:	4606      	mov	r6, r0
 8004db0:	460f      	mov	r7, r1
 8004db2:	4620      	mov	r0, r4
 8004db4:	4629      	mov	r1, r5
 8004db6:	f7fb fbcb 	bl	8000550 <__aeabi_dmul>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4630      	mov	r0, r6
 8004dc0:	4639      	mov	r1, r7
 8004dc2:	f7fb fa0f 	bl	80001e4 <__adddf3>
 8004dc6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004dc8:	4b32      	ldr	r3, [pc, #200]	@ (8004e94 <__ieee754_pow+0x794>)
 8004dca:	4413      	add	r3, r2
 8004dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd0:	f7fb fa08 	bl	80001e4 <__adddf3>
 8004dd4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004dd8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004dda:	f7fb fb4f 	bl	800047c <__aeabi_i2d>
 8004dde:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004de0:	4b2d      	ldr	r3, [pc, #180]	@ (8004e98 <__ieee754_pow+0x798>)
 8004de2:	4413      	add	r3, r2
 8004de4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004de8:	4606      	mov	r6, r0
 8004dea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004dee:	460f      	mov	r7, r1
 8004df0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004df4:	f7fb f9f6 	bl	80001e4 <__adddf3>
 8004df8:	4642      	mov	r2, r8
 8004dfa:	464b      	mov	r3, r9
 8004dfc:	f7fb f9f2 	bl	80001e4 <__adddf3>
 8004e00:	4632      	mov	r2, r6
 8004e02:	463b      	mov	r3, r7
 8004e04:	f7fb f9ee 	bl	80001e4 <__adddf3>
 8004e08:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8004e0c:	4632      	mov	r2, r6
 8004e0e:	463b      	mov	r3, r7
 8004e10:	4658      	mov	r0, fp
 8004e12:	460d      	mov	r5, r1
 8004e14:	f7fb f9e4 	bl	80001e0 <__aeabi_dsub>
 8004e18:	4642      	mov	r2, r8
 8004e1a:	464b      	mov	r3, r9
 8004e1c:	f7fb f9e0 	bl	80001e0 <__aeabi_dsub>
 8004e20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e24:	f7fb f9dc 	bl	80001e0 <__aeabi_dsub>
 8004e28:	465c      	mov	r4, fp
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	e036      	b.n	8004e9c <__ieee754_pow+0x79c>
 8004e2e:	bf00      	nop
 8004e30:	4a454eef 	.word	0x4a454eef
 8004e34:	3fca7e28 	.word	0x3fca7e28
 8004e38:	93c9db65 	.word	0x93c9db65
 8004e3c:	3fcd864a 	.word	0x3fcd864a
 8004e40:	a91d4101 	.word	0xa91d4101
 8004e44:	3fd17460 	.word	0x3fd17460
 8004e48:	518f264d 	.word	0x518f264d
 8004e4c:	3fd55555 	.word	0x3fd55555
 8004e50:	db6fabff 	.word	0xdb6fabff
 8004e54:	3fdb6db6 	.word	0x3fdb6db6
 8004e58:	33333303 	.word	0x33333303
 8004e5c:	3fe33333 	.word	0x3fe33333
 8004e60:	e0000000 	.word	0xe0000000
 8004e64:	3feec709 	.word	0x3feec709
 8004e68:	dc3a03fd 	.word	0xdc3a03fd
 8004e6c:	3feec709 	.word	0x3feec709
 8004e70:	145b01f5 	.word	0x145b01f5
 8004e74:	be3e2fe0 	.word	0xbe3e2fe0
 8004e78:	7ff00000 	.word	0x7ff00000
 8004e7c:	43400000 	.word	0x43400000
 8004e80:	0003988e 	.word	0x0003988e
 8004e84:	000bb679 	.word	0x000bb679
 8004e88:	08005518 	.word	0x08005518
 8004e8c:	3ff00000 	.word	0x3ff00000
 8004e90:	40080000 	.word	0x40080000
 8004e94:	080054f8 	.word	0x080054f8
 8004e98:	08005508 	.word	0x08005508
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ea2:	e5d7      	b.n	8004a54 <__ieee754_pow+0x354>
 8004ea4:	f04f 0a01 	mov.w	sl, #1
 8004ea8:	e65e      	b.n	8004b68 <__ieee754_pow+0x468>
 8004eaa:	a3b4      	add	r3, pc, #720	@ (adr r3, 800517c <__ieee754_pow+0xa7c>)
 8004eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	4639      	mov	r1, r7
 8004eb4:	f7fb f996 	bl	80001e4 <__adddf3>
 8004eb8:	4642      	mov	r2, r8
 8004eba:	e9cd 0100 	strd	r0, r1, [sp]
 8004ebe:	464b      	mov	r3, r9
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	4629      	mov	r1, r5
 8004ec4:	f7fb f98c 	bl	80001e0 <__aeabi_dsub>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	460b      	mov	r3, r1
 8004ecc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ed0:	f7fb fdce 	bl	8000a70 <__aeabi_dcmpgt>
 8004ed4:	2800      	cmp	r0, #0
 8004ed6:	f47f ae00 	bne.w	8004ada <__ieee754_pow+0x3da>
 8004eda:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8004ede:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004ee2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8004ee6:	fa43 fa0a 	asr.w	sl, r3, sl
 8004eea:	44da      	add	sl, fp
 8004eec:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8004ef0:	489d      	ldr	r0, [pc, #628]	@ (8005168 <__ieee754_pow+0xa68>)
 8004ef2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8004ef6:	4108      	asrs	r0, r1
 8004ef8:	ea00 030a 	and.w	r3, r0, sl
 8004efc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8004f00:	f1c1 0114 	rsb	r1, r1, #20
 8004f04:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8004f08:	fa4a fa01 	asr.w	sl, sl, r1
 8004f0c:	f1bb 0f00 	cmp.w	fp, #0
 8004f10:	4640      	mov	r0, r8
 8004f12:	4649      	mov	r1, r9
 8004f14:	f04f 0200 	mov.w	r2, #0
 8004f18:	bfb8      	it	lt
 8004f1a:	f1ca 0a00 	rsblt	sl, sl, #0
 8004f1e:	f7fb f95f 	bl	80001e0 <__aeabi_dsub>
 8004f22:	4680      	mov	r8, r0
 8004f24:	4689      	mov	r9, r1
 8004f26:	4632      	mov	r2, r6
 8004f28:	463b      	mov	r3, r7
 8004f2a:	4640      	mov	r0, r8
 8004f2c:	4649      	mov	r1, r9
 8004f2e:	f7fb f959 	bl	80001e4 <__adddf3>
 8004f32:	2400      	movs	r4, #0
 8004f34:	a37c      	add	r3, pc, #496	@ (adr r3, 8005128 <__ieee754_pow+0xa28>)
 8004f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	460d      	mov	r5, r1
 8004f3e:	f7fb fb07 	bl	8000550 <__aeabi_dmul>
 8004f42:	4642      	mov	r2, r8
 8004f44:	e9cd 0100 	strd	r0, r1, [sp]
 8004f48:	464b      	mov	r3, r9
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	4629      	mov	r1, r5
 8004f4e:	f7fb f947 	bl	80001e0 <__aeabi_dsub>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	4630      	mov	r0, r6
 8004f58:	4639      	mov	r1, r7
 8004f5a:	f7fb f941 	bl	80001e0 <__aeabi_dsub>
 8004f5e:	a374      	add	r3, pc, #464	@ (adr r3, 8005130 <__ieee754_pow+0xa30>)
 8004f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f64:	f7fb faf4 	bl	8000550 <__aeabi_dmul>
 8004f68:	a373      	add	r3, pc, #460	@ (adr r3, 8005138 <__ieee754_pow+0xa38>)
 8004f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6e:	4680      	mov	r8, r0
 8004f70:	4689      	mov	r9, r1
 8004f72:	4620      	mov	r0, r4
 8004f74:	4629      	mov	r1, r5
 8004f76:	f7fb faeb 	bl	8000550 <__aeabi_dmul>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4640      	mov	r0, r8
 8004f80:	4649      	mov	r1, r9
 8004f82:	f7fb f92f 	bl	80001e4 <__adddf3>
 8004f86:	4604      	mov	r4, r0
 8004f88:	460d      	mov	r5, r1
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f92:	f7fb f927 	bl	80001e4 <__adddf3>
 8004f96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f9a:	4680      	mov	r8, r0
 8004f9c:	4689      	mov	r9, r1
 8004f9e:	f7fb f91f 	bl	80001e0 <__aeabi_dsub>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	4629      	mov	r1, r5
 8004faa:	f7fb f919 	bl	80001e0 <__aeabi_dsub>
 8004fae:	4642      	mov	r2, r8
 8004fb0:	4606      	mov	r6, r0
 8004fb2:	460f      	mov	r7, r1
 8004fb4:	464b      	mov	r3, r9
 8004fb6:	4640      	mov	r0, r8
 8004fb8:	4649      	mov	r1, r9
 8004fba:	f7fb fac9 	bl	8000550 <__aeabi_dmul>
 8004fbe:	a360      	add	r3, pc, #384	@ (adr r3, 8005140 <__ieee754_pow+0xa40>)
 8004fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc4:	4604      	mov	r4, r0
 8004fc6:	460d      	mov	r5, r1
 8004fc8:	f7fb fac2 	bl	8000550 <__aeabi_dmul>
 8004fcc:	a35e      	add	r3, pc, #376	@ (adr r3, 8005148 <__ieee754_pow+0xa48>)
 8004fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd2:	f7fb f905 	bl	80001e0 <__aeabi_dsub>
 8004fd6:	4622      	mov	r2, r4
 8004fd8:	462b      	mov	r3, r5
 8004fda:	f7fb fab9 	bl	8000550 <__aeabi_dmul>
 8004fde:	a35c      	add	r3, pc, #368	@ (adr r3, 8005150 <__ieee754_pow+0xa50>)
 8004fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe4:	f7fb f8fe 	bl	80001e4 <__adddf3>
 8004fe8:	4622      	mov	r2, r4
 8004fea:	462b      	mov	r3, r5
 8004fec:	f7fb fab0 	bl	8000550 <__aeabi_dmul>
 8004ff0:	a359      	add	r3, pc, #356	@ (adr r3, 8005158 <__ieee754_pow+0xa58>)
 8004ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff6:	f7fb f8f3 	bl	80001e0 <__aeabi_dsub>
 8004ffa:	4622      	mov	r2, r4
 8004ffc:	462b      	mov	r3, r5
 8004ffe:	f7fb faa7 	bl	8000550 <__aeabi_dmul>
 8005002:	a357      	add	r3, pc, #348	@ (adr r3, 8005160 <__ieee754_pow+0xa60>)
 8005004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005008:	f7fb f8ec 	bl	80001e4 <__adddf3>
 800500c:	4622      	mov	r2, r4
 800500e:	462b      	mov	r3, r5
 8005010:	f7fb fa9e 	bl	8000550 <__aeabi_dmul>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4640      	mov	r0, r8
 800501a:	4649      	mov	r1, r9
 800501c:	f7fb f8e0 	bl	80001e0 <__aeabi_dsub>
 8005020:	4604      	mov	r4, r0
 8005022:	460d      	mov	r5, r1
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	4640      	mov	r0, r8
 800502a:	4649      	mov	r1, r9
 800502c:	f7fb fa90 	bl	8000550 <__aeabi_dmul>
 8005030:	2200      	movs	r2, #0
 8005032:	e9cd 0100 	strd	r0, r1, [sp]
 8005036:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800503a:	4620      	mov	r0, r4
 800503c:	4629      	mov	r1, r5
 800503e:	f7fb f8cf 	bl	80001e0 <__aeabi_dsub>
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	e9dd 0100 	ldrd	r0, r1, [sp]
 800504a:	f7fb fbab 	bl	80007a4 <__aeabi_ddiv>
 800504e:	4632      	mov	r2, r6
 8005050:	4604      	mov	r4, r0
 8005052:	460d      	mov	r5, r1
 8005054:	463b      	mov	r3, r7
 8005056:	4640      	mov	r0, r8
 8005058:	4649      	mov	r1, r9
 800505a:	f7fb fa79 	bl	8000550 <__aeabi_dmul>
 800505e:	4632      	mov	r2, r6
 8005060:	463b      	mov	r3, r7
 8005062:	f7fb f8bf 	bl	80001e4 <__adddf3>
 8005066:	4602      	mov	r2, r0
 8005068:	460b      	mov	r3, r1
 800506a:	4620      	mov	r0, r4
 800506c:	4629      	mov	r1, r5
 800506e:	f7fb f8b7 	bl	80001e0 <__aeabi_dsub>
 8005072:	4642      	mov	r2, r8
 8005074:	464b      	mov	r3, r9
 8005076:	f7fb f8b3 	bl	80001e0 <__aeabi_dsub>
 800507a:	460b      	mov	r3, r1
 800507c:	4602      	mov	r2, r0
 800507e:	493b      	ldr	r1, [pc, #236]	@ (800516c <__ieee754_pow+0xa6c>)
 8005080:	2000      	movs	r0, #0
 8005082:	f7fb f8ad 	bl	80001e0 <__aeabi_dsub>
 8005086:	ec41 0b10 	vmov	d0, r0, r1
 800508a:	ee10 3a90 	vmov	r3, s1
 800508e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005092:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005096:	da30      	bge.n	80050fa <__ieee754_pow+0x9fa>
 8005098:	4650      	mov	r0, sl
 800509a:	f000 f87d 	bl	8005198 <scalbn>
 800509e:	ec51 0b10 	vmov	r0, r1, d0
 80050a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050a6:	f7ff bbd2 	b.w	800484e <__ieee754_pow+0x14e>
 80050aa:	4c31      	ldr	r4, [pc, #196]	@ (8005170 <__ieee754_pow+0xa70>)
 80050ac:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80050b0:	42a3      	cmp	r3, r4
 80050b2:	d91a      	bls.n	80050ea <__ieee754_pow+0x9ea>
 80050b4:	4b2f      	ldr	r3, [pc, #188]	@ (8005174 <__ieee754_pow+0xa74>)
 80050b6:	440b      	add	r3, r1
 80050b8:	4303      	orrs	r3, r0
 80050ba:	d009      	beq.n	80050d0 <__ieee754_pow+0x9d0>
 80050bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050c0:	2200      	movs	r2, #0
 80050c2:	2300      	movs	r3, #0
 80050c4:	f7fb fcb6 	bl	8000a34 <__aeabi_dcmplt>
 80050c8:	3800      	subs	r0, #0
 80050ca:	bf18      	it	ne
 80050cc:	2001      	movne	r0, #1
 80050ce:	e42b      	b.n	8004928 <__ieee754_pow+0x228>
 80050d0:	4642      	mov	r2, r8
 80050d2:	464b      	mov	r3, r9
 80050d4:	f7fb f884 	bl	80001e0 <__aeabi_dsub>
 80050d8:	4632      	mov	r2, r6
 80050da:	463b      	mov	r3, r7
 80050dc:	f7fb fcbe 	bl	8000a5c <__aeabi_dcmpge>
 80050e0:	2800      	cmp	r0, #0
 80050e2:	d1eb      	bne.n	80050bc <__ieee754_pow+0x9bc>
 80050e4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8005184 <__ieee754_pow+0xa84>
 80050e8:	e6f7      	b.n	8004eda <__ieee754_pow+0x7da>
 80050ea:	469a      	mov	sl, r3
 80050ec:	4b22      	ldr	r3, [pc, #136]	@ (8005178 <__ieee754_pow+0xa78>)
 80050ee:	459a      	cmp	sl, r3
 80050f0:	f63f aef3 	bhi.w	8004eda <__ieee754_pow+0x7da>
 80050f4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80050f8:	e715      	b.n	8004f26 <__ieee754_pow+0x826>
 80050fa:	ec51 0b10 	vmov	r0, r1, d0
 80050fe:	4619      	mov	r1, r3
 8005100:	e7cf      	b.n	80050a2 <__ieee754_pow+0x9a2>
 8005102:	491a      	ldr	r1, [pc, #104]	@ (800516c <__ieee754_pow+0xa6c>)
 8005104:	2000      	movs	r0, #0
 8005106:	f7ff bb18 	b.w	800473a <__ieee754_pow+0x3a>
 800510a:	2000      	movs	r0, #0
 800510c:	2100      	movs	r1, #0
 800510e:	f7ff bb14 	b.w	800473a <__ieee754_pow+0x3a>
 8005112:	4630      	mov	r0, r6
 8005114:	4639      	mov	r1, r7
 8005116:	f7ff bb10 	b.w	800473a <__ieee754_pow+0x3a>
 800511a:	460c      	mov	r4, r1
 800511c:	f7ff bb5e 	b.w	80047dc <__ieee754_pow+0xdc>
 8005120:	2400      	movs	r4, #0
 8005122:	f7ff bb49 	b.w	80047b8 <__ieee754_pow+0xb8>
 8005126:	bf00      	nop
 8005128:	00000000 	.word	0x00000000
 800512c:	3fe62e43 	.word	0x3fe62e43
 8005130:	fefa39ef 	.word	0xfefa39ef
 8005134:	3fe62e42 	.word	0x3fe62e42
 8005138:	0ca86c39 	.word	0x0ca86c39
 800513c:	be205c61 	.word	0xbe205c61
 8005140:	72bea4d0 	.word	0x72bea4d0
 8005144:	3e663769 	.word	0x3e663769
 8005148:	c5d26bf1 	.word	0xc5d26bf1
 800514c:	3ebbbd41 	.word	0x3ebbbd41
 8005150:	af25de2c 	.word	0xaf25de2c
 8005154:	3f11566a 	.word	0x3f11566a
 8005158:	16bebd93 	.word	0x16bebd93
 800515c:	3f66c16c 	.word	0x3f66c16c
 8005160:	5555553e 	.word	0x5555553e
 8005164:	3fc55555 	.word	0x3fc55555
 8005168:	fff00000 	.word	0xfff00000
 800516c:	3ff00000 	.word	0x3ff00000
 8005170:	4090cbff 	.word	0x4090cbff
 8005174:	3f6f3400 	.word	0x3f6f3400
 8005178:	3fe00000 	.word	0x3fe00000
 800517c:	652b82fe 	.word	0x652b82fe
 8005180:	3c971547 	.word	0x3c971547
 8005184:	4090cc00 	.word	0x4090cc00

08005188 <fabs>:
 8005188:	ec51 0b10 	vmov	r0, r1, d0
 800518c:	4602      	mov	r2, r0
 800518e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005192:	ec43 2b10 	vmov	d0, r2, r3
 8005196:	4770      	bx	lr

08005198 <scalbn>:
 8005198:	b570      	push	{r4, r5, r6, lr}
 800519a:	ec55 4b10 	vmov	r4, r5, d0
 800519e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80051a2:	4606      	mov	r6, r0
 80051a4:	462b      	mov	r3, r5
 80051a6:	b991      	cbnz	r1, 80051ce <scalbn+0x36>
 80051a8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80051ac:	4323      	orrs	r3, r4
 80051ae:	d03d      	beq.n	800522c <scalbn+0x94>
 80051b0:	4b35      	ldr	r3, [pc, #212]	@ (8005288 <scalbn+0xf0>)
 80051b2:	4620      	mov	r0, r4
 80051b4:	4629      	mov	r1, r5
 80051b6:	2200      	movs	r2, #0
 80051b8:	f7fb f9ca 	bl	8000550 <__aeabi_dmul>
 80051bc:	4b33      	ldr	r3, [pc, #204]	@ (800528c <scalbn+0xf4>)
 80051be:	429e      	cmp	r6, r3
 80051c0:	4604      	mov	r4, r0
 80051c2:	460d      	mov	r5, r1
 80051c4:	da0f      	bge.n	80051e6 <scalbn+0x4e>
 80051c6:	a328      	add	r3, pc, #160	@ (adr r3, 8005268 <scalbn+0xd0>)
 80051c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051cc:	e01e      	b.n	800520c <scalbn+0x74>
 80051ce:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80051d2:	4291      	cmp	r1, r2
 80051d4:	d10b      	bne.n	80051ee <scalbn+0x56>
 80051d6:	4622      	mov	r2, r4
 80051d8:	4620      	mov	r0, r4
 80051da:	4629      	mov	r1, r5
 80051dc:	f7fb f802 	bl	80001e4 <__adddf3>
 80051e0:	4604      	mov	r4, r0
 80051e2:	460d      	mov	r5, r1
 80051e4:	e022      	b.n	800522c <scalbn+0x94>
 80051e6:	460b      	mov	r3, r1
 80051e8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80051ec:	3936      	subs	r1, #54	@ 0x36
 80051ee:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80051f2:	4296      	cmp	r6, r2
 80051f4:	dd0d      	ble.n	8005212 <scalbn+0x7a>
 80051f6:	2d00      	cmp	r5, #0
 80051f8:	a11d      	add	r1, pc, #116	@ (adr r1, 8005270 <scalbn+0xd8>)
 80051fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051fe:	da02      	bge.n	8005206 <scalbn+0x6e>
 8005200:	a11d      	add	r1, pc, #116	@ (adr r1, 8005278 <scalbn+0xe0>)
 8005202:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005206:	a31a      	add	r3, pc, #104	@ (adr r3, 8005270 <scalbn+0xd8>)
 8005208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520c:	f7fb f9a0 	bl	8000550 <__aeabi_dmul>
 8005210:	e7e6      	b.n	80051e0 <scalbn+0x48>
 8005212:	1872      	adds	r2, r6, r1
 8005214:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005218:	428a      	cmp	r2, r1
 800521a:	dcec      	bgt.n	80051f6 <scalbn+0x5e>
 800521c:	2a00      	cmp	r2, #0
 800521e:	dd08      	ble.n	8005232 <scalbn+0x9a>
 8005220:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005224:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005228:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800522c:	ec45 4b10 	vmov	d0, r4, r5
 8005230:	bd70      	pop	{r4, r5, r6, pc}
 8005232:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8005236:	da08      	bge.n	800524a <scalbn+0xb2>
 8005238:	2d00      	cmp	r5, #0
 800523a:	a10b      	add	r1, pc, #44	@ (adr r1, 8005268 <scalbn+0xd0>)
 800523c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005240:	dac1      	bge.n	80051c6 <scalbn+0x2e>
 8005242:	a10f      	add	r1, pc, #60	@ (adr r1, 8005280 <scalbn+0xe8>)
 8005244:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005248:	e7bd      	b.n	80051c6 <scalbn+0x2e>
 800524a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800524e:	3236      	adds	r2, #54	@ 0x36
 8005250:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005254:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005258:	4620      	mov	r0, r4
 800525a:	4b0d      	ldr	r3, [pc, #52]	@ (8005290 <scalbn+0xf8>)
 800525c:	4629      	mov	r1, r5
 800525e:	2200      	movs	r2, #0
 8005260:	e7d4      	b.n	800520c <scalbn+0x74>
 8005262:	bf00      	nop
 8005264:	f3af 8000 	nop.w
 8005268:	c2f8f359 	.word	0xc2f8f359
 800526c:	01a56e1f 	.word	0x01a56e1f
 8005270:	8800759c 	.word	0x8800759c
 8005274:	7e37e43c 	.word	0x7e37e43c
 8005278:	8800759c 	.word	0x8800759c
 800527c:	fe37e43c 	.word	0xfe37e43c
 8005280:	c2f8f359 	.word	0xc2f8f359
 8005284:	81a56e1f 	.word	0x81a56e1f
 8005288:	43500000 	.word	0x43500000
 800528c:	ffff3cb0 	.word	0xffff3cb0
 8005290:	3c900000 	.word	0x3c900000

08005294 <with_errno>:
 8005294:	b510      	push	{r4, lr}
 8005296:	ed2d 8b02 	vpush	{d8}
 800529a:	eeb0 8a40 	vmov.f32	s16, s0
 800529e:	eef0 8a60 	vmov.f32	s17, s1
 80052a2:	4604      	mov	r4, r0
 80052a4:	f7ff f984 	bl	80045b0 <__errno>
 80052a8:	eeb0 0a48 	vmov.f32	s0, s16
 80052ac:	eef0 0a68 	vmov.f32	s1, s17
 80052b0:	ecbd 8b02 	vpop	{d8}
 80052b4:	6004      	str	r4, [r0, #0]
 80052b6:	bd10      	pop	{r4, pc}

080052b8 <xflow>:
 80052b8:	4603      	mov	r3, r0
 80052ba:	b507      	push	{r0, r1, r2, lr}
 80052bc:	ec51 0b10 	vmov	r0, r1, d0
 80052c0:	b183      	cbz	r3, 80052e4 <xflow+0x2c>
 80052c2:	4602      	mov	r2, r0
 80052c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80052c8:	e9cd 2300 	strd	r2, r3, [sp]
 80052cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80052d0:	f7fb f93e 	bl	8000550 <__aeabi_dmul>
 80052d4:	ec41 0b10 	vmov	d0, r0, r1
 80052d8:	2022      	movs	r0, #34	@ 0x22
 80052da:	b003      	add	sp, #12
 80052dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80052e0:	f7ff bfd8 	b.w	8005294 <with_errno>
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	e7ee      	b.n	80052c8 <xflow+0x10>
 80052ea:	0000      	movs	r0, r0
 80052ec:	0000      	movs	r0, r0
	...

080052f0 <__math_uflow>:
 80052f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80052f8 <__math_uflow+0x8>
 80052f4:	f7ff bfe0 	b.w	80052b8 <xflow>
 80052f8:	00000000 	.word	0x00000000
 80052fc:	10000000 	.word	0x10000000

08005300 <__math_oflow>:
 8005300:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005308 <__math_oflow+0x8>
 8005304:	f7ff bfd8 	b.w	80052b8 <xflow>
 8005308:	00000000 	.word	0x00000000
 800530c:	70000000 	.word	0x70000000

08005310 <__ieee754_sqrt>:
 8005310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005314:	4a68      	ldr	r2, [pc, #416]	@ (80054b8 <__ieee754_sqrt+0x1a8>)
 8005316:	ec55 4b10 	vmov	r4, r5, d0
 800531a:	43aa      	bics	r2, r5
 800531c:	462b      	mov	r3, r5
 800531e:	4621      	mov	r1, r4
 8005320:	d110      	bne.n	8005344 <__ieee754_sqrt+0x34>
 8005322:	4622      	mov	r2, r4
 8005324:	4620      	mov	r0, r4
 8005326:	4629      	mov	r1, r5
 8005328:	f7fb f912 	bl	8000550 <__aeabi_dmul>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	4620      	mov	r0, r4
 8005332:	4629      	mov	r1, r5
 8005334:	f7fa ff56 	bl	80001e4 <__adddf3>
 8005338:	4604      	mov	r4, r0
 800533a:	460d      	mov	r5, r1
 800533c:	ec45 4b10 	vmov	d0, r4, r5
 8005340:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005344:	2d00      	cmp	r5, #0
 8005346:	dc0e      	bgt.n	8005366 <__ieee754_sqrt+0x56>
 8005348:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800534c:	4322      	orrs	r2, r4
 800534e:	d0f5      	beq.n	800533c <__ieee754_sqrt+0x2c>
 8005350:	b19d      	cbz	r5, 800537a <__ieee754_sqrt+0x6a>
 8005352:	4622      	mov	r2, r4
 8005354:	4620      	mov	r0, r4
 8005356:	4629      	mov	r1, r5
 8005358:	f7fa ff42 	bl	80001e0 <__aeabi_dsub>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	f7fb fa20 	bl	80007a4 <__aeabi_ddiv>
 8005364:	e7e8      	b.n	8005338 <__ieee754_sqrt+0x28>
 8005366:	152a      	asrs	r2, r5, #20
 8005368:	d115      	bne.n	8005396 <__ieee754_sqrt+0x86>
 800536a:	2000      	movs	r0, #0
 800536c:	e009      	b.n	8005382 <__ieee754_sqrt+0x72>
 800536e:	0acb      	lsrs	r3, r1, #11
 8005370:	3a15      	subs	r2, #21
 8005372:	0549      	lsls	r1, r1, #21
 8005374:	2b00      	cmp	r3, #0
 8005376:	d0fa      	beq.n	800536e <__ieee754_sqrt+0x5e>
 8005378:	e7f7      	b.n	800536a <__ieee754_sqrt+0x5a>
 800537a:	462a      	mov	r2, r5
 800537c:	e7fa      	b.n	8005374 <__ieee754_sqrt+0x64>
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	3001      	adds	r0, #1
 8005382:	02dc      	lsls	r4, r3, #11
 8005384:	d5fb      	bpl.n	800537e <__ieee754_sqrt+0x6e>
 8005386:	1e44      	subs	r4, r0, #1
 8005388:	1b12      	subs	r2, r2, r4
 800538a:	f1c0 0420 	rsb	r4, r0, #32
 800538e:	fa21 f404 	lsr.w	r4, r1, r4
 8005392:	4323      	orrs	r3, r4
 8005394:	4081      	lsls	r1, r0
 8005396:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800539a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800539e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053a2:	07d2      	lsls	r2, r2, #31
 80053a4:	bf5c      	itt	pl
 80053a6:	005b      	lslpl	r3, r3, #1
 80053a8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80053ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80053b0:	bf58      	it	pl
 80053b2:	0049      	lslpl	r1, r1, #1
 80053b4:	2600      	movs	r6, #0
 80053b6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80053ba:	106d      	asrs	r5, r5, #1
 80053bc:	0049      	lsls	r1, r1, #1
 80053be:	2016      	movs	r0, #22
 80053c0:	4632      	mov	r2, r6
 80053c2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80053c6:	1917      	adds	r7, r2, r4
 80053c8:	429f      	cmp	r7, r3
 80053ca:	bfde      	ittt	le
 80053cc:	193a      	addle	r2, r7, r4
 80053ce:	1bdb      	suble	r3, r3, r7
 80053d0:	1936      	addle	r6, r6, r4
 80053d2:	0fcf      	lsrs	r7, r1, #31
 80053d4:	3801      	subs	r0, #1
 80053d6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80053da:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80053de:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80053e2:	d1f0      	bne.n	80053c6 <__ieee754_sqrt+0xb6>
 80053e4:	4604      	mov	r4, r0
 80053e6:	2720      	movs	r7, #32
 80053e8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80053ec:	429a      	cmp	r2, r3
 80053ee:	eb00 0e0c 	add.w	lr, r0, ip
 80053f2:	db02      	blt.n	80053fa <__ieee754_sqrt+0xea>
 80053f4:	d113      	bne.n	800541e <__ieee754_sqrt+0x10e>
 80053f6:	458e      	cmp	lr, r1
 80053f8:	d811      	bhi.n	800541e <__ieee754_sqrt+0x10e>
 80053fa:	f1be 0f00 	cmp.w	lr, #0
 80053fe:	eb0e 000c 	add.w	r0, lr, ip
 8005402:	da42      	bge.n	800548a <__ieee754_sqrt+0x17a>
 8005404:	2800      	cmp	r0, #0
 8005406:	db40      	blt.n	800548a <__ieee754_sqrt+0x17a>
 8005408:	f102 0801 	add.w	r8, r2, #1
 800540c:	1a9b      	subs	r3, r3, r2
 800540e:	458e      	cmp	lr, r1
 8005410:	bf88      	it	hi
 8005412:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005416:	eba1 010e 	sub.w	r1, r1, lr
 800541a:	4464      	add	r4, ip
 800541c:	4642      	mov	r2, r8
 800541e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8005422:	3f01      	subs	r7, #1
 8005424:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8005428:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800542c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005430:	d1dc      	bne.n	80053ec <__ieee754_sqrt+0xdc>
 8005432:	4319      	orrs	r1, r3
 8005434:	d01b      	beq.n	800546e <__ieee754_sqrt+0x15e>
 8005436:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80054bc <__ieee754_sqrt+0x1ac>
 800543a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80054c0 <__ieee754_sqrt+0x1b0>
 800543e:	e9da 0100 	ldrd	r0, r1, [sl]
 8005442:	e9db 2300 	ldrd	r2, r3, [fp]
 8005446:	f7fa fecb 	bl	80001e0 <__aeabi_dsub>
 800544a:	e9da 8900 	ldrd	r8, r9, [sl]
 800544e:	4602      	mov	r2, r0
 8005450:	460b      	mov	r3, r1
 8005452:	4640      	mov	r0, r8
 8005454:	4649      	mov	r1, r9
 8005456:	f7fb faf7 	bl	8000a48 <__aeabi_dcmple>
 800545a:	b140      	cbz	r0, 800546e <__ieee754_sqrt+0x15e>
 800545c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005460:	e9da 0100 	ldrd	r0, r1, [sl]
 8005464:	e9db 2300 	ldrd	r2, r3, [fp]
 8005468:	d111      	bne.n	800548e <__ieee754_sqrt+0x17e>
 800546a:	3601      	adds	r6, #1
 800546c:	463c      	mov	r4, r7
 800546e:	1072      	asrs	r2, r6, #1
 8005470:	0863      	lsrs	r3, r4, #1
 8005472:	07f1      	lsls	r1, r6, #31
 8005474:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8005478:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800547c:	bf48      	it	mi
 800547e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8005482:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8005486:	4618      	mov	r0, r3
 8005488:	e756      	b.n	8005338 <__ieee754_sqrt+0x28>
 800548a:	4690      	mov	r8, r2
 800548c:	e7be      	b.n	800540c <__ieee754_sqrt+0xfc>
 800548e:	f7fa fea9 	bl	80001e4 <__adddf3>
 8005492:	e9da 8900 	ldrd	r8, r9, [sl]
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	4640      	mov	r0, r8
 800549c:	4649      	mov	r1, r9
 800549e:	f7fb fac9 	bl	8000a34 <__aeabi_dcmplt>
 80054a2:	b120      	cbz	r0, 80054ae <__ieee754_sqrt+0x19e>
 80054a4:	1ca0      	adds	r0, r4, #2
 80054a6:	bf08      	it	eq
 80054a8:	3601      	addeq	r6, #1
 80054aa:	3402      	adds	r4, #2
 80054ac:	e7df      	b.n	800546e <__ieee754_sqrt+0x15e>
 80054ae:	1c63      	adds	r3, r4, #1
 80054b0:	f023 0401 	bic.w	r4, r3, #1
 80054b4:	e7db      	b.n	800546e <__ieee754_sqrt+0x15e>
 80054b6:	bf00      	nop
 80054b8:	7ff00000 	.word	0x7ff00000
 80054bc:	20000068 	.word	0x20000068
 80054c0:	20000060 	.word	0x20000060

080054c4 <_init>:
 80054c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c6:	bf00      	nop
 80054c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ca:	bc08      	pop	{r3}
 80054cc:	469e      	mov	lr, r3
 80054ce:	4770      	bx	lr

080054d0 <_fini>:
 80054d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d2:	bf00      	nop
 80054d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054d6:	bc08      	pop	{r3}
 80054d8:	469e      	mov	lr, r3
 80054da:	4770      	bx	lr
